<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>yuanyang5917.github.io/</title>
   
   <link>http://yuanyang5917.github.io/</link>
   <description>——LuckyTurbo</description>
   <language>en-uk</language>
   <managingEditor> LuckyTurbo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>注解初始化控件(ButterKnife方式)<下></title>
	  <link>//butterknifedemo02</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-04-13T00:00:00+08:00</pubDate>
	  <guid>//butterknifedemo02</guid>
	  <description><![CDATA[
	     <p>一个星期没更新博客了，虽然目前博客很乱！最近比较忙，视力有些下降，不过ButterKnife的事件实现终算完成了！</p>

<blockquote>
  <h3 id="butterknifedemohttpdownloadcsdnnetdetailyuanyang59179489865"><a href="http://download.csdn.net/detail/yuanyang5917/9489865">ButterKnifeDemo实现(注解完善，方便阅读)</a></h3>
</blockquote>

<h2 id="section">目标</h2>
<p>之所以butterknife可以实现点击view的时候调用注解过的方法，其实是在点击的回调方法中调用目标类的相应注释过的方法：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">        <span class="n">view</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">DebouncingOnClickListener</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="n">doClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">target</span><span class="o">.</span><span class="na">click</span><span class="o">(</span><span class="n">v</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span></code></pre></figure>

<p>拿我的demo为例，我们最终是要生成一个如下的类：</p>

<p>这里写代码片</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">turbo</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">apt</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.turbo.apt.library.internal.DebouncingOnClickListener</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.turbo.apt.library.internal.Finder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.turbo.apt.library.internal.ViewBinder</span><span class="o">;</span>

<span class="cm">/**
 * Created by LuckyTurbo on 16/4/11.
 *
 * 待生成的类
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity_ViewBinder</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">MainActivity</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">ViewBinder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">bind</span><span class="o">(</span><span class="n">Finder</span> <span class="n">finder</span><span class="o">,</span> <span class="kd">final</span> <span class="n">T</span> <span class="n">target</span><span class="o">,</span> <span class="n">Object</span> <span class="n">source</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="n">view</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">,</span><span class="s">"textView 我 啊"</span><span class="o">);</span>
        <span class="n">target</span><span class="o">.</span><span class="na">textView</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">castView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">,</span><span class="s">"textView 我 啊"</span><span class="o">);</span>
        <span class="n">view</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">rightView</span><span class="o">,</span><span class="s">"rightView 我 啊"</span><span class="o">);</span>
        <span class="n">target</span><span class="o">.</span><span class="na">rightView</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">castView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">rightView</span><span class="o">,</span><span class="s">"rightView 我 啊"</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">DebouncingOnClickListener</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="n">doClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">target</span><span class="o">.</span><span class="na">click</span><span class="o">(</span><span class="n">v</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>

    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>那么下面要做的就是收集各种注解数据，然后再根据这些数据生成最终的类。</p>

<p>##收集数据
绝大部分方法的数据都是从注解中获取的，那么我们如何设计注解呢？
###注解设计分析
需求：
1.id
2.设置方法 (example:setOnLongClickListener)
3.接口类型 (android.view.View.OnLongClickListener)
4.接口中的方法：
1.方法名 (onLongClick)
2.参数类型 (android.view.View)
3.方法返回值 （boolean）</p>

<p>这么多东西如果在每个注解里面都加上，想想都恶心，但是注解并没有继承这一说，但是我们可以在注解的基础上再进行注解，上层注解里面可以设定默认值，每次给上层注解填值就可以了
——其实我们想要的就是规范，就是模版，其实就是针对规范编程</p>

<p>下面看下主要的几个注解：</p>

<ul>
  <li>@OnClick</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">CLASS</span><span class="o">)</span>
<span class="nd">@ListenerClass</span><span class="o">(</span>
        <span class="n">targetType</span> <span class="o">=</span> <span class="s">"android.view.View"</span><span class="o">,</span>
        <span class="n">setter</span> <span class="o">=</span> <span class="s">"setOnClickListener"</span><span class="o">,</span>
        <span class="n">type</span> <span class="o">=</span> <span class="s">"com.turbo.apt.library.internal.DebouncingOnClickListener"</span><span class="o">,</span><span class="c1">// 这个是butterKnife中的防卡点击</span>
        <span class="n">method</span> <span class="o">=</span> <span class="nd">@ListenerMethod</span><span class="o">(</span>
                <span class="n">name</span> <span class="o">=</span> <span class="s">"doClick"</span><span class="o">,</span>
                <span class="n">parameters</span> <span class="o">=</span> <span class="s">"android.view.View"</span><span class="o">,</span>
                <span class="n">returnType</span> <span class="o">=</span> <span class="s">"void"</span>
        <span class="o">)</span>
<span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">OnClick</span> <span class="o">{</span>
    <span class="c1">// ids annotation注解 奇怪没导入成功</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">value</span><span class="o">()</span> <span class="k">default</span> <span class="o">{</span><span class="n">View</span><span class="o">.</span><span class="na">NO_ID</span><span class="o">};</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>@ListenerClass</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">ANNOTATION_TYPE</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span><span class="c1">// 靠，获取注解的注解好像必需要使用runtime，不然取不到</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">ListenerClass</span> <span class="o">{</span>
    <span class="c1">//    @ListenerClass(</span>
    <span class="c1">//            targetType = "android.view.View",</span>
    <span class="c1">//            setter = "setOnClickListener",</span>
    <span class="c1">//            type = "butterknife.internal.DebouncingOnClickListener",</span>
    <span class="c1">//            method = @ListenerMethod(</span>
    <span class="c1">//                    name = "doClick",</span>
    <span class="c1">//                    parameters = "android.view.View"</span>
    <span class="c1">//            )</span>
    <span class="c1">//    )</span>

    <span class="c1">// 某view</span>
    <span class="n">String</span> <span class="n">targetType</span><span class="o">();</span>
    <span class="c1">// 设置方法的名称</span>
    <span class="n">String</span> <span class="n">setter</span><span class="o">();</span>
    <span class="c1">// 接口全称</span>
    <span class="n">String</span> <span class="n">type</span><span class="o">();</span>
    <span class="cm">/** Enum which declares the listener callback methods. Mutually exclusive to {@link #method()}. */</span>
    <span class="c1">// 跟method互斥</span>
    <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Enum</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">callbacks</span><span class="o">()</span> <span class="k">default</span> <span class="n">NONE</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
    <span class="cm">/**
     * Method data for single-method listener callbacks. Mutually exclusive with {@link #callbacks()}
     * and an error to specify more than one value.
     */</span>
    <span class="n">ListenerMethod</span> <span class="n">method</span><span class="o">();</span>

    <span class="c1">// callback的默认值</span>
    <span class="kd">enum</span> <span class="n">NONE</span> <span class="o">{}</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>@ListenerMethod</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">ListenerMethod</span> <span class="o">{</span>

    <span class="c1">// listener 方法 的 名字</span>
    <span class="n">String</span> <span class="n">name</span><span class="o">();</span>

    <span class="c1">// 方法参数</span>
    <span class="n">String</span><span class="o">[]</span> <span class="n">parameters</span><span class="o">()</span> <span class="k">default</span> <span class="o">{};</span>

    <span class="c1">// 方法返回类型</span>
    <span class="n">String</span> <span class="n">returnType</span><span class="o">()</span> <span class="k">default</span> <span class="s">"void"</span><span class="o">;</span>

    <span class="cm">/** If {@link #returnType()} is not {@code void} this value is returned when no binding exists. */</span>
    <span class="c1">// 如果returnType 不是void，就返回这个值</span>
    <span class="n">String</span> <span class="n">defaultReturn</span><span class="o">()</span> <span class="k">default</span> <span class="s">"null"</span><span class="o">;</span>
<span class="o">}</span></code></pre></figure>

<h3 id="section-1">注解收集数据结构</h3>
<p><img src="http://img.blog.csdn.net/20160413140458623" alt="这里写图片描述" /></p>

<h3 id="section-2">注解收集数据逻辑</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">TypeElement</span><span class="o">,</span> <span class="n">VBinderBuilder</span><span class="o">&gt;</span> <span class="n">findAndParseTargets</span><span class="o">(</span><span class="n">RoundEnvironment</span> <span class="n">roundEnv</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">NoSuchMethodException</span><span class="o">,</span> <span class="n">InvocationTargetException</span><span class="o">,</span> <span class="n">IllegalAccessException</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">TypeElement</span><span class="o">,</span> <span class="n">VBinderBuilder</span><span class="o">&gt;</span> <span class="n">vBinderBuilderMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashMap</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// 解析所有的@Bind 元素</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Element</span> <span class="n">element</span> <span class="o">:</span> <span class="n">roundEnv</span><span class="o">.</span><span class="na">getElementsAnnotatedWith</span><span class="o">(</span><span class="n">Bind</span><span class="o">.</span><span class="na">class</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">TypeElement</span> <span class="n">typeElement</span> <span class="o">=</span> <span class="o">(</span><span class="n">TypeElement</span><span class="o">)</span> <span class="n">element</span><span class="o">.</span><span class="na">getEnclosingElement</span><span class="o">();</span>
            <span class="n">VBinderBuilder</span> <span class="n">builderClass</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">vBinderBuilderMap</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">typeElement</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">builderClass</span> <span class="o">=</span> <span class="n">vBinderBuilderMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">typeElement</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">String</span> <span class="n">targetType</span> <span class="o">=</span> <span class="n">typeElement</span><span class="o">.</span><span class="na">getQualifiedName</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
                <span class="n">String</span> <span class="n">classPackage</span> <span class="o">=</span> <span class="n">getPackageName</span><span class="o">(</span><span class="n">typeElement</span><span class="o">);</span>
                <span class="c1">// packageName$className_ViewBinder</span>
                <span class="n">String</span> <span class="n">className</span> <span class="o">=</span> <span class="n">getClassName</span><span class="o">(</span><span class="n">typeElement</span><span class="o">,</span> <span class="n">classPackage</span><span class="o">)</span> <span class="o">+</span> <span class="n">APTConfig</span><span class="o">.</span><span class="na">SUFFIX</span><span class="o">;</span>

                <span class="n">builderClass</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VBinderBuilder</span><span class="o">(</span><span class="n">classPackage</span><span class="o">,</span> <span class="n">className</span><span class="o">,</span> <span class="n">targetType</span><span class="o">);</span>
                <span class="n">vBinderBuilderMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">typeElement</span><span class="o">,</span> <span class="n">builderClass</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">Bind</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">value</span><span class="o">();</span>
            <span class="n">String</span> <span class="n">elementName</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
            <span class="n">TypeName</span> <span class="n">typeName</span> <span class="o">=</span> <span class="n">TypeName</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">asType</span><span class="o">());</span>
            <span class="n">FieldViewBinding</span> <span class="n">fieldViewBinding</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FieldViewBinding</span><span class="o">(</span><span class="n">elementName</span><span class="o">,</span> <span class="n">typeName</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
            <span class="n">builderClass</span><span class="o">.</span><span class="na">addField</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">fieldViewBinding</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 解析所有LISTENERS：方法上的事件注解</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Annotation</span><span class="o">&gt;</span> <span class="n">annotationClass</span> <span class="o">:</span> <span class="n">LISTENERS</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">Element</span> <span class="n">element</span> <span class="o">:</span> <span class="n">roundEnv</span><span class="o">.</span><span class="na">getElementsAnnotatedWith</span><span class="o">(</span><span class="n">annotationClass</span><span class="o">))</span> <span class="o">{</span>
                <span class="c1">// 方法元素</span>
                <span class="n">ExecutableElement</span> <span class="n">executableElement</span> <span class="o">=</span> <span class="o">(</span><span class="n">ExecutableElement</span><span class="o">)</span> <span class="n">element</span><span class="o">;</span>
                <span class="c1">// 类元素(持有者元素)</span>
                <span class="n">TypeElement</span> <span class="n">enclosingElement</span> <span class="o">=</span> <span class="o">(</span><span class="n">TypeElement</span><span class="o">)</span> <span class="n">element</span><span class="o">.</span><span class="na">getEnclosingElement</span><span class="o">();</span>
                <span class="c1">// 方法的注解对象</span>
                <span class="n">Annotation</span> <span class="n">annotation</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">annotationClass</span><span class="o">);</span>
                <span class="c1">// 注解的value方法</span>
                <span class="n">Method</span> <span class="n">annotationValue</span> <span class="o">=</span> <span class="n">annotationClass</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">"value"</span><span class="o">);</span>
                <span class="c1">// 获取注解的ids</span>
                <span class="kt">int</span><span class="o">[]</span> <span class="n">ids</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">[])</span> <span class="n">annotationValue</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">annotation</span><span class="o">);</span>
                <span class="c1">// 方法名称</span>
                <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">executableElement</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
                <span class="c1">// 注解的注解</span>
                <span class="n">ListenerClass</span> <span class="n">listenerClass</span> <span class="o">=</span> <span class="n">annotationClass</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">ListenerClass</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                <span class="c1">// 注解注解的参数</span>
                <span class="n">ListenerMethod</span> <span class="n">listenerMethod</span> <span class="o">=</span> <span class="n">listenerClass</span><span class="o">.</span><span class="na">method</span><span class="o">();</span>
                <span class="c1">// 方法参数</span>
                <span class="n">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">VariableElement</span><span class="o">&gt;</span> <span class="n">methodParameters</span> <span class="o">=</span> <span class="n">executableElement</span><span class="o">.</span><span class="na">getParameters</span><span class="o">();</span>

                <span class="n">Parameter</span><span class="o">[]</span> <span class="n">parameters</span> <span class="o">=</span> <span class="n">Parameter</span><span class="o">.</span><span class="na">NONE</span><span class="o">;</span>
                <span class="c1">// 真实方法参数</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">methodParameters</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">parameters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Parameter</span><span class="o">[</span><span class="n">methodParameters</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
                    <span class="c1">// 注解的注解中的参数类型</span>
                    <span class="n">String</span><span class="o">[]</span> <span class="n">parameterTypes</span> <span class="o">=</span> <span class="n">listenerMethod</span><span class="o">.</span><span class="na">parameters</span><span class="o">();</span>

                    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">methodParameters</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                        <span class="n">VariableElement</span> <span class="n">methodParameter</span> <span class="o">=</span> <span class="n">methodParameters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                        <span class="c1">// 方法参数</span>
                        <span class="n">TypeMirror</span> <span class="n">methodParameterType</span> <span class="o">=</span> <span class="n">methodParameter</span><span class="o">.</span><span class="na">asType</span><span class="o">();</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">methodParameterType</span> <span class="k">instanceof</span> <span class="n">TypeVariable</span><span class="o">)</span> <span class="o">{</span>
                            <span class="n">TypeVariable</span> <span class="n">typeVariable</span> <span class="o">=</span> <span class="o">(</span><span class="n">TypeVariable</span><span class="o">)</span> <span class="n">methodParameterType</span><span class="o">;</span>
                            <span class="n">methodParameterType</span> <span class="o">=</span> <span class="n">typeVariable</span><span class="o">.</span><span class="na">getUpperBound</span><span class="o">();</span>
                            <span class="n">messager</span><span class="o">.</span><span class="na">printMessage</span><span class="o">(</span><span class="n">Diagnostic</span><span class="o">.</span><span class="na">Kind</span><span class="o">.</span><span class="na">ERROR</span><span class="o">,</span> <span class="o">((</span><span class="n">TypeVariable</span><span class="o">)</span> <span class="n">methodParameterType</span><span class="o">).</span><span class="na">asElement</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">());</span>
                        <span class="o">}</span>
                        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">parameterTypes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                            <span class="c1">// 封装了真实参数的位置，类型</span>
                            <span class="n">parameters</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Parameter</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">TypeName</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">methodParameterType</span><span class="o">));</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="c1">// name:方法名 parameters:方法参数parameter required:方法上是否有Optional注解（一般不会有，所以为true）</span>
                <span class="c1">// 一般都是true，我们这里没有给注解设置Optional注解</span>
                <span class="n">MethodViewBinding</span> <span class="n">methodViewBinding</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MethodViewBinding</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">parameters</span><span class="o">),</span> <span class="kc">true</span><span class="o">);</span>
                <span class="n">VBinderBuilder</span> <span class="n">builderClass</span> <span class="o">=</span> <span class="n">getOrCreateTargetClass</span><span class="o">(</span><span class="n">vBinderBuilderMap</span><span class="o">,</span> <span class="n">enclosingElement</span><span class="o">);</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">id</span> <span class="o">:</span> <span class="n">ids</span><span class="o">){</span>
                    <span class="n">builderClass</span><span class="o">.</span><span class="na">addMethod</span><span class="o">(</span><span class="n">id</span><span class="o">,</span><span class="n">listenerClass</span><span class="o">,</span><span class="n">listenerMethod</span><span class="o">,</span><span class="n">methodViewBinding</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">vBinderBuilderMap</span><span class="o">;</span>
    <span class="o">}</span></code></pre></figure>

<h2 id="viewbinder">ViewBinder绑定帮助类生成</h2>

<p>根据上一篇的实现步骤，我们生成一个实现ViewBinder接口，及其方法，实现控件初始化的类已经不是一件难事，现在最大的困难就是如何通过JavaPoet实现类似下面的代码：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">        <span class="n">view</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">DebouncingOnClickListener</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="n">doClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">target</span><span class="o">.</span><span class="na">click</span><span class="o">(</span><span class="n">v</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span></code></pre></figure>

<p>根据butterKnife代码我给出具体的解决步骤：
以@OnLongClick为例：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// new DebouncingOnClickListener()</span>
<span class="c1">// 这里就是一个空接口以及一个父类</span>
<span class="n">TypeSpec</span><span class="o">.</span><span class="na">Builder</span> <span class="n">interfaceEventBuilder</span> <span class="o">=</span> <span class="n">TypeSpec</span><span class="o">.</span><span class="na">anonymousClassBuilder</span><span class="o">(</span><span class="s">""</span><span class="o">)</span>
						<span class="o">.</span><span class="na">superclass</span><span class="o">(</span><span class="n">ClassName</span><span class="o">.</span><span class="na">bestGuess</span><span class="o">(</span><span class="n">keyListenerClass</span><span class="o">.</span><span class="na">type</span><span class="o">()));</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// 这里代表的是 方法：public void doClick</span>
<span class="n">MethodSpec</span><span class="o">.</span><span class="na">Builder</span> <span class="n">interfaceMethodBuilder</span> <span class="o">=</span> <span class="n">MethodSpec</span><span class="o">.</span><span class="na">methodBuilder</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">())</span>
								<span class="o">.</span><span class="na">addAnnotation</span><span class="o">(</span><span class="n">Override</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
								<span class="o">.</span><span class="na">addModifiers</span><span class="o">(</span><span class="n">Modifier</span><span class="o">.</span><span class="na">PUBLIC</span><span class="o">)</span>
								<span class="o">.</span><span class="na">returns</span><span class="o">(</span><span class="n">bestGuess</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">returnType</span><span class="o">()));</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// 第一个参数  是参数类型  第一个参数是参数名(p0 p1 p2 ...)</span>
<span class="c1">// 方法中的参数(View v)</span>
<span class="n">interfaceMethodBuilder</span><span class="o">.</span><span class="na">addParameter</span><span class="o">(</span><span class="n">bestGuess</span><span class="o">(</span><span class="n">parameterTypes</span><span class="o">[</span><span class="n">i</span><span class="o">]),</span> <span class="s">"p"</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// 调用target的对应方法：target.click(v);</span>
<span class="n">codeBuilder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"target.$L("</span><span class="o">,</span> <span class="n">methodViewBinding</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span></code></pre></figure>

<p>整个方法的生成代码如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">addMethodBindings</span><span class="p">(</span><span class="n">MethodSpec</span><span class="o">.</span><span class="na">Builder</span> <span class="n">resultBuilder</span><span class="o">,</span> <span class="n">VBinderData</span> <span class="n">vbinderData</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">ListenerClass</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">ListenerMethod</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">MethodViewBinding</span><span class="o">&gt;&gt;&gt;</span> <span class="n">listenerMethodBindings</span> <span class="o">=</span> <span class="n">vbinderData</span><span class="o">.</span><span class="na">getMethodBindings</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">listenerMethodBindings</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">ListenerClass</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">ListenerMethod</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">MethodViewBinding</span><span class="o">&gt;&gt;&gt;&gt;</span> <span class="n">entries</span> <span class="o">=</span> <span class="n">listenerMethodBindings</span><span class="o">.</span><span class="na">entrySet</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">ListenerClass</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">ListenerMethod</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">MethodViewBinding</span><span class="o">&gt;&gt;&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">entries</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">ListenerClass</span> <span class="n">keyListenerClass</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
            <span class="n">Map</span><span class="o">&lt;</span><span class="n">ListenerMethod</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">MethodViewBinding</span><span class="o">&gt;&gt;</span> <span class="n">methodValue</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
            <span class="c1">// 创建接口实体类(空匿名类的接口父类)</span>
            <span class="c1">// anonymous 匿名</span>
            <span class="n">TypeSpec</span><span class="o">.</span><span class="na">Builder</span> <span class="n">interfaceEventBuilder</span> <span class="o">=</span> <span class="n">TypeSpec</span><span class="o">.</span><span class="na">anonymousClassBuilder</span><span class="o">(</span><span class="s">""</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">superclass</span><span class="o">(</span><span class="n">ClassName</span><span class="o">.</span><span class="na">bestGuess</span><span class="o">(</span><span class="n">keyListenerClass</span><span class="o">.</span><span class="na">type</span><span class="o">()));</span>
            <span class="c1">// 根据ListenerClass 中的 参数 生成代码</span>
            <span class="n">ListenerMethod</span> <span class="n">method</span> <span class="o">=</span> <span class="n">keyListenerClass</span><span class="o">.</span><span class="na">method</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">method</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">MethodSpec</span><span class="o">.</span><span class="na">Builder</span> <span class="n">interfaceMethodBuilder</span> <span class="o">=</span> <span class="n">MethodSpec</span><span class="o">.</span><span class="na">methodBuilder</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">())</span>
                        <span class="o">.</span><span class="na">addAnnotation</span><span class="o">(</span><span class="n">Override</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">addModifiers</span><span class="o">(</span><span class="n">Modifier</span><span class="o">.</span><span class="na">PUBLIC</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">returns</span><span class="o">(</span><span class="n">bestGuess</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">returnType</span><span class="o">()));</span>
                <span class="n">String</span><span class="o">[]</span> <span class="n">parameterTypes</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">parameters</span><span class="o">();</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">parameterTypes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="c1">// 第一个参数  是参数类型  第一个参数是参数名(p0 p1 p2 ...)</span>
                    <span class="n">interfaceMethodBuilder</span><span class="o">.</span><span class="na">addParameter</span><span class="o">(</span><span class="n">bestGuess</span><span class="o">(</span><span class="n">parameterTypes</span><span class="o">[</span><span class="n">i</span><span class="o">]),</span> <span class="s">"p"</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
                <span class="o">}</span>

                <span class="kt">boolean</span> <span class="n">hasReturnType</span> <span class="o">=</span> <span class="o">!</span><span class="s">"void"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">returnType</span><span class="o">());</span>
                <span class="c1">// 代码块</span>
                <span class="n">CodeBlock</span><span class="o">.</span><span class="na">Builder</span> <span class="n">codeBuilder</span> <span class="o">=</span> <span class="n">CodeBlock</span><span class="o">.</span><span class="na">builder</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">hasReturnType</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">codeBuilder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"return "</span><span class="o">);</span>
                <span class="o">}</span>

                <span class="c1">// 一个id对应多个ListenerMethod</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">methodValue</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">method</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">for</span> <span class="o">(</span><span class="n">MethodViewBinding</span> <span class="n">methodViewBinding</span> <span class="o">:</span> <span class="n">methodValue</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">method</span><span class="o">))</span> <span class="o">{</span>
                        <span class="c1">// 调用target的对应方法</span>
                        <span class="n">codeBuilder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"target.$L("</span><span class="o">,</span> <span class="n">methodViewBinding</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
                        <span class="n">List</span><span class="o">&lt;</span><span class="n">Parameter</span><span class="o">&gt;</span> <span class="n">parameters</span> <span class="o">=</span> <span class="n">methodViewBinding</span><span class="o">.</span><span class="na">getParameters</span><span class="o">();</span>
                        <span class="c1">// MethodListener注解的参数</span>
                        <span class="n">String</span><span class="o">[]</span> <span class="n">methodParameters</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">parameters</span><span class="o">();</span>
                        <span class="c1">// 优化了每次parameters.size()</span>
                        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">count</span> <span class="o">=</span> <span class="n">parameters</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                                <span class="n">codeBuilder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">", "</span><span class="o">);</span>
                            <span class="o">}</span>
                            <span class="n">Parameter</span> <span class="n">parameter</span> <span class="o">=</span> <span class="n">parameters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                            <span class="kt">int</span> <span class="n">listenerPosition</span> <span class="o">=</span> <span class="n">parameter</span><span class="o">.</span><span class="na">getListenerPosition</span><span class="o">();</span>
                            <span class="c1">// 类型不一样，范型万能转换</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">parameter</span><span class="o">.</span><span class="na">requiresCast</span><span class="o">(</span><span class="n">methodParameters</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
                                <span class="n">codeBuilder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"finder.&lt;$T&gt;castParam(p$L, $S, $L, $S, $L)\n"</span><span class="o">,</span> <span class="n">parameter</span><span class="o">.</span><span class="na">getType</span><span class="o">(),</span>
                                        <span class="n">listenerPosition</span><span class="o">,</span> <span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">(),</span> <span class="n">listenerPosition</span><span class="o">,</span> <span class="n">methodViewBinding</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">i</span><span class="o">);</span>
                            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                                <span class="n">codeBuilder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"p$L"</span><span class="o">,</span> <span class="n">listenerPosition</span><span class="o">);</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                        <span class="n">codeBuilder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">");\n"</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">hasReturnType</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">codeBuilder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"$L;\n"</span><span class="o">,</span> <span class="n">method</span><span class="o">.</span><span class="na">defaultReturn</span><span class="o">());</span>
                <span class="o">}</span>
                <span class="n">interfaceMethodBuilder</span><span class="o">.</span><span class="na">addCode</span><span class="o">(</span><span class="n">codeBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
                <span class="n">interfaceEventBuilder</span><span class="o">.</span><span class="na">addMethod</span><span class="o">(</span><span class="n">interfaceMethodBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
            <span class="o">}</span>
            <span class="c1">// 如果不是view类型，需要强转</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">APTConfig</span><span class="o">.</span><span class="na">VIEW_TYPE</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">keyListenerClass</span><span class="o">.</span><span class="na">targetType</span><span class="o">()))</span> <span class="o">{</span>
                <span class="c1">// targetType不是view的时候需要强转</span>
                <span class="n">resultBuilder</span><span class="o">.</span><span class="na">addStatement</span><span class="o">(</span><span class="s">"(($T) view).$L($L)"</span><span class="o">,</span> <span class="n">bestGuess</span><span class="o">(</span><span class="n">keyListenerClass</span><span class="o">.</span><span class="na">targetType</span><span class="o">()),</span>
                        <span class="n">keyListenerClass</span><span class="o">.</span><span class="na">setter</span><span class="o">(),</span> <span class="n">interfaceEventBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// view.setOnClickListener(对象)</span>
                <span class="n">resultBuilder</span><span class="o">.</span><span class="na">addStatement</span><span class="o">(</span><span class="s">"view.$L($L)"</span><span class="o">,</span> <span class="n">keyListenerClass</span><span class="o">.</span><span class="na">setter</span><span class="o">(),</span> <span class="n">interfaceEventBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span></code></pre></figure>

<p>其他的具体步骤大家看下demo</p>

<h2 id="section-3">总结</h2>
<p>代码这个东西，看跟敲是两种体验，也是两种结果，以后会继续坚持，总结下从butterKnife框架细节中我学到的知识：</p>

<ul>
  <li>BitSet : java中提供的此神器用来记录我对一组数据的改动与否</li>
  <li>@Retention(RUNTIME) ：注解的注解是需要runtime的，即便仅在编译期读取，RetentionPolicy.CLASS也是不奏效的，必需是RetentionPolicy.RUNTIME</li>
  <li>for (int i = 0, count = parameters.size(); i &lt; count; i++) : 省去每次遍历调用parameters.size()的同时，又优雅的初始化了count并附上了想要的值(智慧而优雅)</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>注解初始化控件(ButterKnife方式)<上></title>
	  <link>//butterknifedemo01</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-04-05T00:00:00+08:00</pubDate>
	  <guid>//butterknifedemo01</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>在学习了XUtils的注入方式之后，看了下ButterKnife的实现方式，结果发现完全不一样，然后借鉴网上的博客，结果发现用的都是Eclipse以及旧版本的ButterKnife进行实现的。</p>

  <p>这里我用AndroidStudio根据ButterKnife的版本进行了实现。</p>
</blockquote>

<p>文字枯燥，还是先看下butterknife的module图：
<img src="http://img.blog.csdn.net/20160401092206024" alt="这里写图片描述" /></p>

<p>先看下ButterKnife中生成的java代码（看看骚包的注释 Do not modify!）</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// Generated code from Butter Knife. Do not modify!</span>
<span class="c1">// Generated code from Butter Knife. Do not modify!</span>
<span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">butterknife</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">android.widget.AdapterView</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">butterknife.ButterKnife</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">butterknife.internal.DebouncingOnClickListener</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">butterknife.internal.Finder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">butterknife.internal.Utils</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">butterknife.internal.ViewBinder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.IllegalStateException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.Object</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.Override</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.SuppressWarnings</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleActivity</span><span class="err">$</span><span class="n">$ViewBinder</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">SimpleActivity</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">ViewBinder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="n">bind</span><span class="o">(</span><span class="kd">final</span> <span class="n">Finder</span> <span class="n">finder</span><span class="o">,</span> <span class="kd">final</span> <span class="n">T</span> <span class="n">target</span><span class="o">,</span> <span class="n">Object</span> <span class="n">source</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Unbinder</span> <span class="n">unbinder</span> <span class="o">=</span> <span class="n">createUnbinder</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
    <span class="n">View</span> <span class="n">view</span><span class="o">;</span>
    <span class="n">view</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="mi">2130968576</span><span class="o">,</span> <span class="s">"field 'title'"</span><span class="o">);</span>
    <span class="n">target</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">castView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="mi">2130968576</span><span class="o">,</span> <span class="s">"field 'title'"</span><span class="o">);</span>
    <span class="n">view</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="mi">2130968577</span><span class="o">,</span> <span class="s">"field 'subtitle'"</span><span class="o">);</span>
    <span class="n">target</span><span class="o">.</span><span class="na">subtitle</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">castView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="mi">2130968577</span><span class="o">,</span> <span class="s">"field 'subtitle'"</span><span class="o">);</span>
    <span class="n">view</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="mi">2130968578</span><span class="o">,</span> <span class="s">"field 'hello', method 'sayHello', and method 'sayGetOffMe'"</span><span class="o">);</span>
    <span class="n">target</span><span class="o">.</span><span class="na">hello</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">castView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="mi">2130968578</span><span class="o">,</span> <span class="s">"field 'hello'"</span><span class="o">);</span>
    <span class="n">unbinder</span><span class="o">.</span><span class="na">view2130968578</span> <span class="o">=</span> <span class="n">view</span><span class="o">;</span>
    <span class="n">view</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">DebouncingOnClickListener</span><span class="o">()</span> <span class="o">{</span>
      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="n">doClick</span><span class="o">(</span><span class="n">View</span> <span class="n">p0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">target</span><span class="o">.</span><span class="na">sayHello</span><span class="o">();</span>
      <span class="o">}</span>
    <span class="o">});</span>
    <span class="n">view</span><span class="o">.</span><span class="na">setOnLongClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnLongClickListener</span><span class="o">()</span> <span class="o">{</span>
      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">onLongClick</span><span class="o">(</span><span class="n">View</span> <span class="n">p0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">target</span><span class="o">.</span><span class="na">sayGetOffMe</span><span class="o">();</span>
      <span class="o">}</span>
    <span class="o">});</span>
    <span class="n">view</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="mi">2130968579</span><span class="o">,</span> <span class="s">"field 'listOfThings' and method 'onItemClick'"</span><span class="o">);</span>
    <span class="n">target</span><span class="o">.</span><span class="na">listOfThings</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">castView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="mi">2130968579</span><span class="o">,</span> <span class="s">"field 'listOfThings'"</span><span class="o">);</span>
    <span class="n">unbinder</span><span class="o">.</span><span class="na">view2130968579</span> <span class="o">=</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">((</span><span class="n">AdapterView</span><span class="o">&lt;?&gt;)</span> <span class="n">view</span><span class="o">).</span><span class="na">setOnItemClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">AdapterView</span><span class="o">.</span><span class="na">OnItemClickListener</span><span class="o">()</span> <span class="o">{</span>
      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="n">onItemClick</span><span class="o">(</span><span class="n">AdapterView</span><span class="o">&lt;?&gt;</span> <span class="n">p0</span><span class="o">,</span> <span class="n">View</span> <span class="n">p1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">p2</span><span class="o">,</span> <span class="kt">long</span> <span class="n">p3</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">target</span><span class="o">.</span><span class="na">onItemClick</span><span class="o">(</span><span class="n">p2</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">});</span>
    <span class="n">view</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="mi">2130968580</span><span class="o">,</span> <span class="s">"field 'footer'"</span><span class="o">);</span>
    <span class="n">target</span><span class="o">.</span><span class="na">footer</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">castView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="mi">2130968580</span><span class="o">,</span> <span class="s">"field 'footer'"</span><span class="o">);</span>
    <span class="n">target</span><span class="o">.</span><span class="na">headerViews</span> <span class="o">=</span> <span class="n">Utils</span><span class="o">.</span><span class="na">listOf</span><span class="o">(</span>
        <span class="n">finder</span><span class="o">.&lt;</span><span class="n">View</span><span class="o">&gt;</span><span class="n">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="mi">2130968576</span><span class="o">,</span> <span class="s">"field 'headerViews'"</span><span class="o">),</span> 
        <span class="n">finder</span><span class="o">.&lt;</span><span class="n">View</span><span class="o">&gt;</span><span class="n">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="mi">2130968577</span><span class="o">,</span> <span class="s">"field 'headerViews'"</span><span class="o">),</span> 
        <span class="n">finder</span><span class="o">.&lt;</span><span class="n">View</span><span class="o">&gt;</span><span class="n">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="mi">2130968578</span><span class="o">,</span> <span class="s">"field 'headerViews'"</span><span class="o">));</span>
    <span class="n">target</span><span class="o">.</span><span class="na">unbinder</span> <span class="o">=</span> <span class="n">unbinder</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
  <span class="kd">protected</span> <span class="o">&lt;</span><span class="n">U</span> <span class="kd">extends</span> <span class="n">Unbinder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">U</span> <span class="n">createUnbinder</span><span class="o">(</span><span class="n">T</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">U</span><span class="o">)</span> <span class="k">new</span> <span class="n">Unbinder</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
  <span class="kd">protected</span> <span class="o">&lt;</span><span class="n">U</span> <span class="kd">extends</span> <span class="n">Unbinder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">U</span> <span class="n">accessUnbinder</span><span class="o">(</span><span class="n">T</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">U</span><span class="o">)</span> <span class="n">target</span><span class="o">.</span><span class="na">unbinder</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Unbinder</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">SimpleActivity</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">ButterKnife</span><span class="o">.</span><span class="na">ViewUnbinder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">T</span> <span class="n">target</span><span class="o">;</span>

    <span class="n">View</span> <span class="n">view2130968578</span><span class="o">;</span>

    <span class="n">View</span> <span class="n">view2130968579</span><span class="o">;</span>

    <span class="kd">protected</span> <span class="n">Unbinder</span><span class="o">(</span><span class="n">T</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">target</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="n">unbind</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalStateException</span><span class="o">(</span><span class="s">"Bindings already cleared."</span><span class="o">);</span>
      <span class="n">unbind</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
      <span class="n">target</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kt">void</span> <span class="n">unbind</span><span class="o">(</span><span class="n">T</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">target</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="n">target</span><span class="o">.</span><span class="na">subtitle</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="n">view2130968578</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
      <span class="n">view2130968578</span><span class="o">.</span><span class="na">setOnLongClickListener</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
      <span class="n">target</span><span class="o">.</span><span class="na">hello</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="o">((</span><span class="n">AdapterView</span><span class="o">&lt;?&gt;)</span> <span class="n">view2130968579</span><span class="o">).</span><span class="na">setOnItemClickListener</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
      <span class="n">target</span><span class="o">.</span><span class="na">listOfThings</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="n">target</span><span class="o">.</span><span class="na">footer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="n">target</span><span class="o">.</span><span class="na">headerViews</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="n">target</span><span class="o">.</span><span class="na">unbinder</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<h2 id="butterknifeviewdemohttpdownloadcsdnnetdetailyuanyang59179478759"><a href="http://download.csdn.net/detail/yuanyang5917/9478759">ButterKnifeView注入demo(简单易学)</a></h2>

<blockquote>
  <p>这个demo的代码生成，以及接口思想，以及调用生成代码的思想，都是借鉴ButterKnife的</p>
</blockquote>

<blockquote>
  <p>我先简单实现了ButterKnife的View注入，去除了ButterKnife繁琐的编译校验，本篇也没有添加事件注入(下一篇会有)</p>
</blockquote>

<h3 id="xutils--butterknife">XUtils 与 ButterKnife实现方式的区别</h3>
<p>上篇XUtils实现注解初始化用的是反射 +  动态代理</p>

<blockquote>
  <p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p>
</blockquote>

<h2 id="apt">APT</h2>
<p>而ButterKnife使用的是APT (Annotation Processing Tool )
&gt;apt是一个命令行工具，与之配套的还有一套用来描述程序语义结构的Mirror API。Mirror API（com.sun.mirror.*）描述的是程序在编译时刻的静态结构。通过Mirror API可以获取到被注解的Java类型元素的信息，从而提供相应的处理逻辑。具体的处理工作交给apt工具来完成。编写注解处理器的核心是AnnotationProcessorFactory和AnnotationProcessor两个接口。后者表示的是注解处理器，而前者则是为某些注解类型创建注解处理器的工厂。</p>

<ol>
  <li>
    <p>APT配置
需要再compiler Module中的main.resources.META-INF.services下新建文本java.annotation.processing.Processor，在文本内添加Processor全名(我的Processor是com.example.MyProcessor)
或者直接在Processor实现类上@AutoService(Processor.class)(我还没实现成功)
需要在build.gradle里面配置APT插件(classpath ‘com.neenbedankt.gradle.plugins:android-apt:1.8’)</p>
  </li>
  <li>
    <p>Processor类
(1)JAVA1.6以后的Processor实现类都需要extends AbstractProcessor
(2)Processor类需要指定其处理的注解
方式一(类上注解)：@SupportedAnnotationTypes(“com.example.AptBetter”)
方式二(重写方法)：getSupportedAnnotationTypes
(4)process方法，编译时进入的主方法，用于分析注解信息，以及生成代码
(4)Processor都要指定版本
一般获取最新的版本：</p>
  </li>
</ol>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Override</span>
<span class="kd">public</span> <span class="n">SourceVersion</span> <span class="nf">getSupportedSourceVersion</span><span class="p">(</span><span class="o">)</span> <span class="o">{</span>
<span class="k">return</span> <span class="n">SourceVersion</span><span class="o">.</span><span class="na">latestSupported</span><span class="o">();</span>
<span class="o">}</span></code></pre></figure>

<ol>
  <li>Process内部元素
ProcessingEnvironment：编译环境</li>
</ol>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// 用于生成代码</span>
<span class="n">Filer</span> <span class="n">filer</span> <span class="o">=</span> <span class="n">processingEnv</span><span class="o">.</span><span class="na">getFiler</span><span class="o">();</span>
<span class="c1">// 用于编译时给图</span>
<span class="n">Messager</span> <span class="n">messager</span> <span class="o">=</span> <span class="n">processingEnv</span><span class="o">.</span><span class="na">getMessager</span><span class="o">();</span>
<span class="c1">// Element工具，可以获取包名</span>
<span class="n">Elements</span> <span class="n">elementUtils</span> <span class="o">=</span> <span class="n">processingEnv</span><span class="o">.</span><span class="na">getElementUtils</span><span class="o">();</span></code></pre></figure>

<p>RoundEnvironment：回合环境(国内暂时没有固定的说法，暂且定义为元素环境)
因为可以从中获取到5大Element</p>

<figure class="highlight"><pre><code class="language-ios" data-lang="ios">Mirror的五大Element
PackageElement 包元素
TypeElement     类元素
VariableElement  变量元素
ExecutableElement  方法元素
TypeParameterElement  参数元素
通过这些元素，可以获取到元素的各种信息：注解、类型、名称等等</code></pre></figure>

<p>其中TypeMirror.accept这个我还很模糊，有明白的请赐教</p>

<ol>
  <li>代码生成器
这里有一个大杀器：JavaPoet (Java诗人) 也是Jake Wharton所参与的著作之一，膜拜Jake Wharthon，膜拜Square。大家可以直接到Github上搜索JavaPoet。</li>
</ol>

<h2 id="section">运行期流程</h2>

<p><img src="http://img.blog.csdn.net/20160401155957286" alt="这里写图片描述" /></p>

<p>主要是通过Butterknife调用生成的Activity$$ViewBinder类中的bind方法，实现了控件初始化、时间注入</p>

<h3 id="question-">Question :</h3>
<p>(1)在代码编写的时候类都还没有生成，那么如何获取其对象
answer:通过反，Activity也是通过这种方式生成的</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">viewBindingClass</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">clsName</span> <span class="o">+</span> <span class="s">"$$ViewBinder"</span><span class="o">);</span>
<span class="n">ViewBinder</span> <span class="n">viewBinder</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewBinder</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;)</span> <span class="n">viewBindingClass</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span></code></pre></figure>

<p>(2)如何能调用bind方法，如何能强转，因为生成的代码实现了ViewBinder接口，接口的力量啊！针对接口编程！</p>

<h2 id="compiler">分析compiler</h2>

<p>思路分析：
（1）一个类、一个内部类生成一个同包下的名称相似的IOC容器类
（2）一类中会有很多控件需要初始化，那么我们把一个类、一个内部类所提供的多个控件信息、类名、包名、id封装成一个Bean：BindingClass(ButterKnife除了可以给控件初始化之外，还可以给各种资源初始化，甚至可以解绑UnBinding，ButterKnife中把每种类型都封装成一种Bean，这里我们紧紧做了View的初始化),我们这里BindingClass里面仅仅放的是FieldViewBinding
（3）一个需要初始化的类对应一个BindingClass(含有很多FieldViewBinding)，对应生成一个ViewBinder，那么生成代码的逻辑我们可以放在Compiler中的BindingClass，作为其内部类(可以直接获取BindingClass中的类名、包名、控件集合)</p>

<p><img src="http://img.blog.csdn.net/20160404004902680" alt="这里写图片描述" /></p>

<h2 id="section-1">编译器读信息</h2>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// 所有AptBetter的成员变量</span>
        <span class="n">Set</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Element</span><span class="o">&gt;</span> <span class="n">elementsAnnotatedWith</span> <span class="o">=</span> <span class="n">roundEnv</span><span class="o">.</span><span class="na">getElementsAnnotatedWith</span><span class="o">(</span><span class="n">AptBetter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="c1">// 元素归类</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Element</span> <span class="n">element</span> <span class="o">:</span> <span class="n">elementsAnnotatedWith</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">TypeElement</span> <span class="n">typeElement</span> <span class="o">=</span> <span class="o">(</span><span class="n">TypeElement</span><span class="o">)</span> <span class="n">element</span><span class="o">.</span><span class="na">getEnclosingElement</span><span class="o">();</span>
            <span class="n">BindingClass</span> <span class="n">bindingClass</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">allBindEvent</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">typeElement</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">bindingClass</span> <span class="o">=</span> <span class="n">allBindEvent</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">typeElement</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">String</span> <span class="n">targetType</span> <span class="o">=</span> <span class="n">typeElement</span><span class="o">.</span><span class="na">getQualifiedName</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
                <span class="n">String</span> <span class="n">classPackage</span> <span class="o">=</span> <span class="n">getPackageName</span><span class="o">(</span><span class="n">typeElement</span><span class="o">);</span>
                <span class="c1">// packageName$className$$ViewBinder</span>
                <span class="n">String</span> <span class="n">className</span> <span class="o">=</span> <span class="n">getClassName</span><span class="o">(</span><span class="n">typeElement</span><span class="o">,</span> <span class="n">classPackage</span><span class="o">)</span> <span class="o">+</span> <span class="n">SUFFIX</span><span class="o">;</span>

                <span class="n">bindingClass</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BindingClass</span><span class="o">(</span><span class="n">classPackage</span><span class="o">,</span> <span class="n">className</span><span class="o">,</span> <span class="n">targetType</span><span class="o">);</span>
                <span class="n">allBindEvent</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">typeElement</span><span class="o">,</span> <span class="n">bindingClass</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">AptBetter</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">value</span><span class="o">();</span>
            <span class="n">String</span> <span class="n">elementName</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
            <span class="n">TypeName</span> <span class="n">typeName</span> <span class="o">=</span> <span class="n">TypeName</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">asType</span><span class="o">());</span>
            <span class="n">bindingClass</span><span class="o">.</span><span class="na">addField</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="k">new</span> <span class="n">FieldViewBinding</span><span class="o">(</span><span class="n">elementName</span><span class="o">,</span> <span class="n">typeName</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
        <span class="o">}</span></code></pre></figure>

<h2 id="javapoet">代码生成(JavaPoet)</h2>
<p>这里是用的是JavaPoet，下面是教程地址：</p>

<ul>
  <li><a href="https://github.com/square/javapoet">JavaPoet In Github</a></li>
  <li><a href="http://p.codekk.com/detail/Android/square/javapoet">JavaPoet博客教程</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Android控件注解IOC注入(XUtils实现方式)</title>
	  <link>//iocxutils</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-03-29T00:00:00+08:00</pubDate>
	  <guid>//iocxutils</guid>
	  <description><![CDATA[
	     <h2 id="xutils">注解初始化控件(XUtils方式)</h2>

<blockquote>
  <p><a href="http://download.csdn.net/detail/yuanyang5917/9477513">DEMO链接地址</a></p>
</blockquote>

<blockquote>
  <p>在第一次潭州教育的公开课上接触了这个框架的讲解，我动手研究了一下，结果一出手就停不下来，先后被我碰上了（<a href="http://tech.glowing.com/cn/dynamic-android-programming/">Glow公司的技术博客——动态Android编程</a> ）、从几个大牛的博客（学到了github pages + Jekyll 免费制作博客网站）<br />
我发现不写博客，很多东西就会忘记(代码如何上传到jcenter我已经忘记了)<br />
Just Do it!真的会有意想不到的收获！</p>
</blockquote>

<p><img src="http://img.blog.csdn.net/20160329132113633" alt="实现效果" />
 1. IOC概念介绍
http://www.cnblogs.com/qqlin/archive/2012/10/09/2707075.html我是从这边文章学习的IOC概念的，写的浅显易懂</p>

<ul>
  <li>控件反转(IOC)：创建何种对象的控制权，转移到第三方</li>
  <li>依赖注入(DI)：是由IOC容器在运行期间，动态地将某种依赖关系注入到对象之中。</li>
  <li>IOC与DI之间的关系：DI是一种IOC的具体思想，(编译运行期，动态注入依赖关系)；使用配置文件实现依赖关系的配置也是一种IOC思想（依赖拖拽）。</li>
  <li>约定优于配置 这个是什么鬼？？</li>
  <li>依赖注入／依赖查找／依赖拖拽
    <ul>
      <li>依赖拖拽是通过对注入对象的集中配置实现的</li>
      <li>依赖查找是在业务组件代码中进行的（EJB和Apache Avalon ）
        <ol>
          <li>XUtils的实现方式XUtils实际上是通过 注解 ＋ 反射 ＋ 动态代理实现的。</li>
        </ol>
      </li>
    </ul>
  </li>
</ul>

<h2 id="layout">layout文件注入：</h2>
<ul>
  <li>使用：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@ContentViewInject</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span></code></pre></figure>

<ul>
  <li>注解：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span><span class="c1">// 使用对象：类</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span><span class="c1">// 生命范围：运行期</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">ContentViewInject</span> <span class="o">{</span>    
	<span class="kt">int</span> <span class="n">value</span><span class="o">();</span><span class="c1">// 存放布局id</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>注入代码：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java">	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">injectLayout</span><span class="p">(</span><span class="n">Activity</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// UIClz</span>
            <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Context</span><span class="o">&gt;</span> <span class="n">uiClass</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
            <span class="c1">// 类上的注解</span>
            <span class="n">ContentViewInject</span> <span class="n">annotation</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">ContentViewInject</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">annotation</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 注解中的layout id值</span>
                <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">annotation</span><span class="o">.</span><span class="na">value</span><span class="o">();</span>
                <span class="c1">// 通过反射使用activity中的setContentView方法进行 布局设置</span>
                <span class="c1">// 局限性：这个方法仅仅适用于activity</span>
                <span class="n">Method</span> <span class="n">setContentView</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">"setContentView"</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                <span class="n">setContentView</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span></code></pre></figure>

<h2 id="section">控件注入：</h2>

<ul>
  <li>使用：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@ViewInject</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">)</span>
<span class="n">TextView</span> <span class="n">textView</span><span class="o">;</span>
<span class="o">......</span>
  <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="n">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
        <span class="n">TurInject</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"徕帝嘎嘎"</span><span class="o">);</span>
    <span class="o">}</span></code></pre></figure>

<ul>
  <li>注解：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">ViewInject</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">value</span><span class="o">();</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>注入：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java">	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">injectViews</span><span class="p">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Context</span><span class="o">&gt;</span> <span class="n">uiClass</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
            <span class="c1">// 获取成员变量</span>
            <span class="n">Field</span><span class="o">[]</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getDeclaredFields</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">Field</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">ViewInject</span> <span class="n">annotation</span> <span class="o">=</span> <span class="n">field</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">ViewInject</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">annotation</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">annotation</span><span class="o">.</span><span class="na">value</span><span class="o">();</span>
                    <span class="n">Method</span> <span class="n">findViewById</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">"findViewById"</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                    <span class="n">Object</span> <span class="n">invoke</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
                    <span class="c1">// 设置允许访问</span>
                    <span class="n">field</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
                    <span class="n">field</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">invoke</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span></code></pre></figure>

<h2 id="section-1">事件注入</h2>

<ul>
  <li>使用代码：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java">	<span class="nd">@ClickEvent</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">},</span> <span class="n">type</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">ccClick</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getBaseContext</span><span class="o">(),</span> <span class="s">"ccClick"</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@ClickEvent</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">},</span> <span class="n">type</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">OnLongClickListener</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">longClick</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getBaseContext</span><span class="o">(),</span> <span class="s">"longClick"</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
    <span class="o">}</span></code></pre></figure>

<ul>
  <li>注解</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">injectMethod</span><span class="p">(</span><span class="kd">final</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Context</span><span class="o">&gt;</span> <span class="n">uiClass</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
            <span class="c1">// 获取所有的方法</span>
            <span class="n">Method</span><span class="o">[]</span> <span class="n">methods</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getMethods</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="kd">final</span> <span class="n">Method</span> <span class="n">method</span> <span class="o">:</span> <span class="n">methods</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">ClickEvent</span> <span class="n">annotation</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">ClickEvent</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                <span class="c1">// 塞选含有ClickEvent注解的方法</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">annotation</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="kt">int</span><span class="o">[]</span> <span class="n">values</span> <span class="o">=</span> <span class="n">annotation</span><span class="o">.</span><span class="na">value</span><span class="o">();</span>
                    <span class="n">Class</span> <span class="n">type</span> <span class="o">=</span> <span class="n">annotation</span><span class="o">.</span><span class="na">type</span><span class="o">();</span>
                    <span class="c1">// 拿到控件</span>
                    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">viewId</span> <span class="o">:</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
                        <span class="c1">// 初始化控件</span>
                        <span class="n">Method</span> <span class="n">findViewById</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">"findViewById"</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                        <span class="c1">// view</span>
                        <span class="kd">final</span> <span class="n">Object</span> <span class="n">viewObj</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">viewId</span><span class="o">);</span>

                        <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">viewClass</span> <span class="o">=</span> <span class="n">viewObj</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
                        <span class="c1">// setOnClickListener／setOnLongClickListener等等</span>
                        <span class="n">String</span> <span class="n">viewSetMethodName</span> <span class="o">=</span> <span class="s">"set"</span> <span class="o">+</span> <span class="n">type</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>
                        <span class="n">Method</span> <span class="n">viewMethod</span> <span class="o">=</span> <span class="n">viewClass</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="n">viewSetMethodName</span><span class="o">,</span> <span class="n">type</span><span class="o">);</span>

                        <span class="c1">// 动态代理就是针对 任意 一个对象的接口方法的  管理／拦截／AOP</span>
                        <span class="n">ViewEventInvocationHandler</span> <span class="n">viewEventInvocationHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ViewEventInvocationHandler</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">method</span><span class="o">);</span>
                        <span class="c1">//  type.getClassLoader ： 类加载器   new Class[]{type} ： type为接口类</span>
                        <span class="n">Object</span> <span class="n">eventInterfaceInstance</span> <span class="o">=</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">type</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">type</span><span class="o">},</span> <span class="n">viewEventInvocationHandler</span><span class="o">);</span>
                        <span class="c1">// 动态代理  OnClickListener 中的</span>
                        <span class="c1">// 执行了setOnClickListener这个方法，那么在响应这个参数OnClickListener接口中的，onclick方法的时候会响应InvocationHandler中的invoke方法</span>
                        <span class="n">viewMethod</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">viewObj</span><span class="o">,</span> <span class="n">eventInterfaceInstance</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>

    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ViewEventInvocationHandler</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="n">Context</span> <span class="n">context</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">Method</span> <span class="n">contentMethod</span><span class="o">;</span>

        <span class="kd">public</span> <span class="n">ViewEventInvocationHandler</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Method</span> <span class="n">contentMethod</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">context</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">contentMethod</span> <span class="o">=</span> <span class="n">contentMethod</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="n">Object</span> <span class="n">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
            <span class="c1">// method 为OnClickListener 中的 onClick</span>
            <span class="c1">// 系统调用参数接口中的 onClick方法的时候，会响应这个方法</span>
            <span class="c1">// 响应这个方法的时候我们需要响应(activity中被ClickEvent标记过的方法)</span>
            <span class="c1">// contentMethod 为activity中被 ClickEvent标记过的方法</span>
            <span class="n">contentMethod</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span></code></pre></figure>

<p><a href="https://www.zhihu.com/question/20794107">知乎——代理、动态代理</a></p>

<ul>
  <li>主要用来做方法的增强，让你可以在不修改源码的情况下，增强一些方法，在方法执行前后做任何你想做的事情（甚至根本不去执行这个方法），因为在InvocationHandler的invoke方法中，你可以直接获取正在调用方法对应的Method对象，具体应用的话，比如可以添加调用日志，做事务控制等。</li>
  <li>还有一个有趣的作用是可以用作远程调用</li>
  <li>在某些情况下，一个客户不想或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</li>
  <li>为其他对象提供一种代理以控制对这个对象的访问</li>
  <li>
    <p>动态代理的缺憾：Proxy已经设计得非常优美，但是还是有一点点小小的遗憾之处，那就是它始终无法摆脱仅支持interface代理的桎梏</p>

    <p>到这里呢，XUtils的布局注入、控件注入、事件注入就全部介绍完了！</p>
  </li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>安卓开发清单</title>
	  <link>//android-inventory</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-03-21T00:00:00+08:00</pubDate>
	  <guid>//android-inventory</guid>
	  <description><![CDATA[
	     <div class="highlighter-rouge"><pre class="highlight"><code>编程素养：
        ——数据结构与算法
        ——设计模式

java基础：
        ——多线程
        ——反射
        ——注解
            ——APT
        ——自定义类加载器


android基础：
        ——自定义view完全解析
        ——动画种类跟原理
        ——5.0材质设计
        ——6.0权限管理
        ——源码解读
    

构架能力：
        ——xutils／butterknife 两种初始化控件方式
        ——Android单元测试
        ——Android测试工具
        ——图片OOM，Volley源码解读，demo功能实现
        ——MVP nucleus简化mvp
        ——REST接口
        ——Gradle插件
        ——大文件断点上传／下载（上传下载队列）
        ——RxJava
        ——React开发
        ——Android插件话开发
        ——Android混淆／加壳儿
        ——dragger
        ——增量升级
        ——ViewBinding
</code></pre>
</div>


	  ]]></description>
	</item>


</channel>
</rss>
