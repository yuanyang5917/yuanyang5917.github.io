<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>yuanyang5917.github.io/</title>
   
   <link>http://yuanyang5917.github.io/</link>
   <description>——LuckyTurbo</description>
   <language>en-uk</language>
   <managingEditor> LuckyTurbo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Technology Of Studying</title>
	  <link>//technologyof-studying</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-03-31T00:00:00+08:00</pubDate>
	  <guid>//technologyof-studying</guid>
	  <description><![CDATA[
	     <ul>
  <li>ButterKnife通过APT实现IOC的</li>
  <li>潭州教育视频学习（VIP跟公开课）
 [(1)ImageLoader架构解析
 (2)插件式开发
 (3)视察动画]</li>
  <li>高焕堂网易云公开课
 ——Android中运用到的设计模式
 [13 Kinds of Design Pattern in Android Framwork]</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>UML类图关系</title>
	  <link>//uml</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-03-31T00:00:00+08:00</pubDate>
	  <guid>//uml</guid>
	  <description><![CDATA[
	     <p>准备写技术博客，发现UML画不出来，在这里捋一下UML各种类图关系，基于<a href="http://demo.netfoucs.com/feeltouch/article/details/46418045">UML类图几种关系的总结</a>，在此基础上做了归纳总结！</p>

<blockquote>
  <p><a href="https://www.processon.com/i/56fcb9fee4b04878f8245f1c">Process On一款非常好的UML在线编辑工具，made in China</a></p>
</blockquote>

<figure class="highlight"><pre><code class="language-default" data-lang="default">在UML类图中，常见几种关系：
1.泛化(Generalization_FY:概括)(继承 : 空三角 ＋ 直线)
2.实现(Realization_FY实现)(接口实现 : 空三角 ＋ 虚线)
3.关联(Association_FY协会)（直线 ＋ 箭头（箭头可无））
4.聚合(Aggregation_FY聚合)(整体与部分的关系，且部分可以离开整体而单独存在)（空菱形 ＋ 直线 ＋ 方向）
5.组合(Composition_FY组合)(整体与部分的关系，但部分不能离开整体而单独存在)（实菱形 ＋ 直线 ＋ 方向）
6.依赖(Dependency_FY依赖)（虚线 ＋ 箭头）

类与类之间由弱到强关系是: 没关系 &gt; 依赖 &gt; 关联 &gt; 聚合 &gt; 组合。</code></pre></figure>

<p>1.泛化（Generalization）</p>

<p>【泛化关系】：是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。</p>

<p>【箭头指向】：带三角箭头的实线，箭头指向父类</p>

<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092740_578.gif" alt="UML类图几种关系的总结" /></p>

<p>2.实现（Realization）</p>

<p>【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现.</p>

<p>【箭头指向】：带三角箭头的虚线，箭头指向接口</p>

<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_47.gif" alt="UML类图几种关系的总结" /></p>

<p>3.关联（Association)</p>

<p>【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。</p>

<p>【代码体现】：成员变量</p>

<p>【箭头及指向】：带普通箭头的实心线，指向被拥有者</p>

<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_41.gif" alt="这里写图片描述" /></p>

<p>上图中，老师与学生是双向关联，老师有多名学生，学生也可能有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。</p>

<p>下图为自身关联：</p>

<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_335.gif" alt="这里写图片描述" /></p>

<p>4.聚合（Aggregation）</p>

<p>【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。</p>

<p>聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。</p>

<p>【代码体现】：成员变量</p>

<p>【箭头及指向】：带空心菱形的实心线，菱形指向整体</p>

<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_681.gif" alt="这里写图片描述" /></p>

<p>5.组合(Composition)</p>

<p>【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。</p>

<p>组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。</p>

<p>【代码体现】：成员变量</p>

<p>【箭头及指向】：带实心菱形的实线，菱形指向整体</p>

<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_278.gif" alt="这里写图片描述" /></p>

<p>6.依赖(Dependency)</p>

<p>【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.</p>

<p>【代码表现】：局部变量、方法的参数或者对静态方法的调用</p>

<p>【箭头及指向】：带箭头的虚线，指向被使用者</p>

<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_129.gif" alt="这里写图片描述" /></p>

<blockquote>
  <p>各种关系的强弱顺序：
泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</p>
</blockquote>

<p>下面这张UML图，比较形象地展示了各种类图关系：</p>

<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092742_482.png" alt="这里写图片描述" /></p>

<blockquote>
  <p><a href="http://www.cnblogs.com/liuzhang/archive/2013/03/17/2964095.html">这里重点说下依赖与关联的区别</a></p>
</blockquote>

<figure class="highlight"><pre><code class="language-default" data-lang="default">依赖(dependency)
可以简单的理解，就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、、临时性的、非常弱的，但是B类的变化会影响到A；比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖；表现在代码层面，为类B作为参数被类A在某个method方法中使用。用带虚线的箭头。


关联(association)
他体现的是两个类、或者类与接口之间语义级别的一种强依赖关系，比如我和我的朋友；这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的、关联可以是单向、双向的；表现在代码层面，为被关联类B以类属性的形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量；</code></pre></figure>

<blockquote>
  <p>依赖就像一夜情，依赖就是使用XX干了YY(仅仅是用了Ta的一个方法)，关联是夫妻，你所有的都是你老婆的(你是你老婆的成员变量)
依赖就是对象偶然需要其它对象的某个方法或者某个属性，而关联是方向性的拥有关系，拥有那个对象，拥有那个对象的所有对外属性以及对外方法，完全深度拥有。</p>
</blockquote>


	  ]]></description>
	</item>

	<item>
	  <title>Android控件注解IOC注入(XUtils实现方式)</title>
	  <link>//iocxutils</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-03-29T00:00:00+08:00</pubDate>
	  <guid>//iocxutils</guid>
	  <description><![CDATA[
	     <h2 id="xutils">注解初始化控件(XUtils方式)</h2>

<blockquote>
  <p><a href="http://download.csdn.net/detail/yuanyang5917/9477513">DEMO链接地址</a></p>
</blockquote>

<blockquote>
  <p>在第一次潭州教育的公开课上接触了这个框架的讲解，我动手研究了一下，结果一出手就停不下来，先后被我碰上了（<a href="http://tech.glowing.com/cn/dynamic-android-programming/">Glow公司的技术博客——动态Android编程</a> ）、从几个大牛的博客（学到了github pages + Jekyll 免费制作博客网站）<br />
我发现不写博客，很多东西就会忘记(代码如何上传到jcenter我已经忘记了)<br />
Just Do it!真的会有意想不到的收获！</p>
</blockquote>

<p><img src="http://img.blog.csdn.net/20160329132113633" alt="实现效果" />
 1. IOC概念介绍
http://www.cnblogs.com/qqlin/archive/2012/10/09/2707075.html我是从这边文章学习的IOC概念的，写的浅显易懂</p>

<ul>
  <li>控件反转(IOC)：创建何种对象的控制权，转移到第三方</li>
  <li>依赖注入(DI)：是由IOC容器在运行期间，动态地将某种依赖关系注入到对象之中。</li>
  <li>IOC与DI之间的关系：DI是一种IOC的具体思想，(编译运行期，动态注入依赖关系)；使用配置文件实现依赖关系的配置也是一种IOC思想（依赖拖拽）。</li>
  <li>约定优于配置 这个是什么鬼？？</li>
  <li>依赖注入／依赖查找／依赖拖拽
    <ul>
      <li>依赖拖拽是通过对注入对象的集中配置实现的</li>
      <li>依赖查找是在业务组件代码中进行的（EJB和Apache Avalon ）
        <ol>
          <li>XUtils的实现方式XUtils实际上是通过 注解 ＋ 反射 ＋ 动态代理实现的。</li>
        </ol>
      </li>
    </ul>
  </li>
</ul>

<h2 id="layout">layout文件注入：</h2>
<ul>
  <li>使用：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@ContentViewInject</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span></code></pre></figure>

<ul>
  <li>注解：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span><span class="c1">// 使用对象：类</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span><span class="c1">// 生命范围：运行期</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">ContentViewInject</span> <span class="o">{</span>    
	<span class="kt">int</span> <span class="n">value</span><span class="o">();</span><span class="c1">// 存放布局id</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>注入代码：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java">	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">injectLayout</span><span class="p">(</span><span class="n">Activity</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// UIClz</span>
            <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Context</span><span class="o">&gt;</span> <span class="n">uiClass</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
            <span class="c1">// 类上的注解</span>
            <span class="n">ContentViewInject</span> <span class="n">annotation</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">ContentViewInject</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">annotation</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 注解中的layout id值</span>
                <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">annotation</span><span class="o">.</span><span class="na">value</span><span class="o">();</span>
                <span class="c1">// 通过反射使用activity中的setContentView方法进行 布局设置</span>
                <span class="c1">// 局限性：这个方法仅仅适用于activity</span>
                <span class="n">Method</span> <span class="n">setContentView</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">"setContentView"</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                <span class="n">setContentView</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span></code></pre></figure>

<h2 id="section">控件注入：</h2>

<ul>
  <li>使用：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@ViewInject</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">)</span>
<span class="n">TextView</span> <span class="n">textView</span><span class="o">;</span>
<span class="o">......</span>
  <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="n">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
        <span class="n">TurInject</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"徕帝嘎嘎"</span><span class="o">);</span>
    <span class="o">}</span></code></pre></figure>

<ul>
  <li>注解：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">ViewInject</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">value</span><span class="o">();</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>注入：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java">	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">injectViews</span><span class="p">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Context</span><span class="o">&gt;</span> <span class="n">uiClass</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
            <span class="c1">// 获取成员变量</span>
            <span class="n">Field</span><span class="o">[]</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getDeclaredFields</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">Field</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">ViewInject</span> <span class="n">annotation</span> <span class="o">=</span> <span class="n">field</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">ViewInject</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">annotation</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">annotation</span><span class="o">.</span><span class="na">value</span><span class="o">();</span>
                    <span class="n">Method</span> <span class="n">findViewById</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">"findViewById"</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                    <span class="n">Object</span> <span class="n">invoke</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
                    <span class="c1">// 设置允许访问</span>
                    <span class="n">field</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
                    <span class="n">field</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">invoke</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span></code></pre></figure>

<h2 id="section-1">事件注入</h2>

<ul>
  <li>使用代码：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java">	<span class="nd">@ClickEvent</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">},</span> <span class="n">type</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">ccClick</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getBaseContext</span><span class="o">(),</span> <span class="s">"ccClick"</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@ClickEvent</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">},</span> <span class="n">type</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">OnLongClickListener</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">longClick</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getBaseContext</span><span class="o">(),</span> <span class="s">"longClick"</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
    <span class="o">}</span></code></pre></figure>

<ul>
  <li>注解</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">injectMethod</span><span class="p">(</span><span class="kd">final</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Context</span><span class="o">&gt;</span> <span class="n">uiClass</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
            <span class="c1">// 获取所有的方法</span>
            <span class="n">Method</span><span class="o">[]</span> <span class="n">methods</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getMethods</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="kd">final</span> <span class="n">Method</span> <span class="n">method</span> <span class="o">:</span> <span class="n">methods</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">ClickEvent</span> <span class="n">annotation</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">ClickEvent</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                <span class="c1">// 塞选含有ClickEvent注解的方法</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">annotation</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="kt">int</span><span class="o">[]</span> <span class="n">values</span> <span class="o">=</span> <span class="n">annotation</span><span class="o">.</span><span class="na">value</span><span class="o">();</span>
                    <span class="n">Class</span> <span class="n">type</span> <span class="o">=</span> <span class="n">annotation</span><span class="o">.</span><span class="na">type</span><span class="o">();</span>
                    <span class="c1">// 拿到控件</span>
                    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">viewId</span> <span class="o">:</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
                        <span class="c1">// 初始化控件</span>
                        <span class="n">Method</span> <span class="n">findViewById</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">"findViewById"</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                        <span class="c1">// view</span>
                        <span class="kd">final</span> <span class="n">Object</span> <span class="n">viewObj</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">viewId</span><span class="o">);</span>

                        <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">viewClass</span> <span class="o">=</span> <span class="n">viewObj</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
                        <span class="c1">// setOnClickListener／setOnLongClickListener等等</span>
                        <span class="n">String</span> <span class="n">viewSetMethodName</span> <span class="o">=</span> <span class="s">"set"</span> <span class="o">+</span> <span class="n">type</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>
                        <span class="n">Method</span> <span class="n">viewMethod</span> <span class="o">=</span> <span class="n">viewClass</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="n">viewSetMethodName</span><span class="o">,</span> <span class="n">type</span><span class="o">);</span>

                        <span class="c1">// 动态代理就是针对 任意 一个对象的接口方法的  管理／拦截／AOP</span>
                        <span class="n">ViewEventInvocationHandler</span> <span class="n">viewEventInvocationHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ViewEventInvocationHandler</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">method</span><span class="o">);</span>
                        <span class="c1">//  type.getClassLoader ： 类加载器   new Class[]{type} ： type为接口类</span>
                        <span class="n">Object</span> <span class="n">eventInterfaceInstance</span> <span class="o">=</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">type</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">type</span><span class="o">},</span> <span class="n">viewEventInvocationHandler</span><span class="o">);</span>
                        <span class="c1">// 动态代理  OnClickListener 中的</span>
                        <span class="c1">// 执行了setOnClickListener这个方法，那么在响应这个参数OnClickListener接口中的，onclick方法的时候会响应InvocationHandler中的invoke方法</span>
                        <span class="n">viewMethod</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">viewObj</span><span class="o">,</span> <span class="n">eventInterfaceInstance</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>

    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ViewEventInvocationHandler</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="n">Context</span> <span class="n">context</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">Method</span> <span class="n">contentMethod</span><span class="o">;</span>

        <span class="kd">public</span> <span class="n">ViewEventInvocationHandler</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Method</span> <span class="n">contentMethod</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">context</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">contentMethod</span> <span class="o">=</span> <span class="n">contentMethod</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="n">Object</span> <span class="n">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
            <span class="c1">// method 为OnClickListener 中的 onClick</span>
            <span class="c1">// 系统调用参数接口中的 onClick方法的时候，会响应这个方法</span>
            <span class="c1">// 响应这个方法的时候我们需要响应(activity中被ClickEvent标记过的方法)</span>
            <span class="c1">// contentMethod 为activity中被 ClickEvent标记过的方法</span>
            <span class="n">contentMethod</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span></code></pre></figure>

<p><a href="https://www.zhihu.com/question/20794107">知乎——代理、动态代理</a></p>

<ul>
  <li>主要用来做方法的增强，让你可以在不修改源码的情况下，增强一些方法，在方法执行前后做任何你想做的事情（甚至根本不去执行这个方法），因为在InvocationHandler的invoke方法中，你可以直接获取正在调用方法对应的Method对象，具体应用的话，比如可以添加调用日志，做事务控制等。</li>
  <li>还有一个有趣的作用是可以用作远程调用</li>
  <li>在某些情况下，一个客户不想或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</li>
  <li>为其他对象提供一种代理以控制对这个对象的访问</li>
  <li>
    <p>动态代理的缺憾：Proxy已经设计得非常优美，但是还是有一点点小小的遗憾之处，那就是它始终无法摆脱仅支持interface代理的桎梏</p>

    <p>到这里呢，XUtils的布局注入、控件注入、事件注入就全部介绍完了！</p>
  </li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>安卓开发清单</title>
	  <link>//android-inventory</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-03-21T00:00:00+08:00</pubDate>
	  <guid>//android-inventory</guid>
	  <description><![CDATA[
	     <div class="highlighter-rouge"><pre class="highlight"><code>编程素养：
        ——数据结构与算法
        ——设计模式

java基础：
        ——多线程
        ——反射
        ——注解
            ——APT
        ——自定义类加载器


android基础：
        ——自定义view完全解析
        ——动画种类跟原理
        ——5.0材质设计
        ——6.0权限管理
        ——源码解读
    

构架能力：
        ——xutils／butterknife 两种初始化控件方式
        ——Android单元测试
        ——Android测试工具
        ——图片OOM，Volley源码解读，demo功能实现
        ——MVP nucleus简化mvp
        ——REST接口
        ——Gradle插件
        ——大文件断点上传／下载（上传下载队列）
        ——RxJava
        ——React开发
        ——Android插件话开发
        ——Android混淆／加壳儿
        ——dragger
        ——增量升级
        ——ViewBinding
</code></pre>
</div>


	  ]]></description>
	</item>

	<item>
	  <title>开篇碎语!</title>
	  <link>//welcome-to-jekyll</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-03-17T22:53:35+08:00</pubDate>
	  <guid>//welcome-to-jekyll</guid>
	  <description><![CDATA[
	     <div class="highlighter-rouge"><pre class="highlight"><code>做这个博客的冲动，来自于一个大三学学生的博客 ———— 此博客是用github pages ＋ jekyll 制作的。

评论、分页、站内搜索、标签、分类、七牛图片优化、站点统计、网站模版话、SEO优化  －－ 有空相继完善

标准化 －－ 流程化 －－ 自动化 （最终境界乃终极懒货）

Fighting！！！！！！！
</code></pre>
</div>


	  ]]></description>
	</item>


</channel>
</rss>
