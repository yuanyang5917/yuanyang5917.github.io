<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>yuanyang5917.github.io/</title>
   
   <link>http://yuanyang5917.github.io/</link>
   <description>——LuckyTurbo</description>
   <language>en-uk</language>
   <managingEditor> LuckyTurbo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Android动画(5.0以下)</title>
	  <link>//animation</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-04-20T00:00:00+08:00</pubDate>
	  <guid>//animation</guid>
	  <description><![CDATA[
	     <p>使用Android两年多了，工作中的动画也动能应付，自认为Android中的动画自己也能用个八九不离十，结果我在学习<a href="http://www.jianshu.com/p/03fdcfd3ae9c">Periscope点赞效果</a>的时候发现动画的这些高级功能我从没用过、也没见过，静下来仔细想了下，我也并不明白Android动画的实现原理，以及生么时候用什么，从视频以及ApiDemo中看到的LayoutAnimator以及颜色渐变、类似弹簧的反复回弹也都没思路。于是我就研究了下Android的这些动画并记录了下来。</p>

<hr />

<div class="highlighter-rouge"><pre class="highlight"><code>3.0以前，android支持两种动画模式,tween animation,frame animation，在3.0中又引入了一个新的动画系统：property animation，这三种动画模式在SDK中被称为property animation,view animation,drawable animation
</code></pre>
</div>

<h1 id="view-animationtween-animation">1. View Animation（Tween Animation）</h1>

<blockquote>
  <p>View Animation(Tween Animation):补间动画，给出两个关键帧，通过一些算法将给定属性值在给定的时间内在两个关键帧间渐变。(xml方式是在anim文件夹中)</p>
</blockquote>

<blockquote>
  <ul>
    <li>View Animation只能用于View对象，而且职能支持一部分功能：位移(translate)、旋转(rotate)、缩放(scale)、透明度渐变(alpha)</li>
    <li>还有一个局限性：对于View Animation，它只是改变了View对象绘制的位置，而没有改变View对象本身（例如：做一个位移动画，那么可点击的位置仅仅还是View开始所在的位置，跟移动中的这个动画并无关系）</li>
    <li><strong>实现原理</strong>：是父布局不断的画出一个外表一样的图像，不断的通过invalidate 去进行重绘，动画的算法其实都是在Transformation的Matrix矩阵中。</li>
  </ul>
</blockquote>

<h1 id="drawable-animationframe-animation">2. Drawable Animation（Frame Animation）</h1>
<p>Drawable Animation（Frame Animation）：帧动画，就像GIF图片，通过一系列Drawable依次显示来模拟动画的效果。(xml方式是在drawable中)</p>

<p>Android中播放GIF图片的时候，可使用这种方式(先分解成单个图片)。</p>

<h1 id="property-animation">3. Property Animation</h1>
<p>Android 3.0引入，顾名思义，它是实际更改view的属性，而不像Tween Animation 仅仅是父布局绘制一个替身，所以Property Animation的功能会强大很多。(在包android.animation下)</p>

<h3 id="section">相同：</h3>
<p>Property Animation 兼容了 Tween Animation的所有功能：设置动画时间、支持(位移、旋转、缩放、透明度渐变)、类似的监听(开始、结束、取消、重复)、插补器
### 加强功能：
后浪推前浪，后出来的Property Animation带来了更强悍的功能：
#### 1. Evaluators(计算器)：告诉Property Animation系统如何去计算属性值</p>

<blockquote>
  <ul>
    <li>IntEvaluator:用于计算Int类型属性值的计算器。</li>
    <li>FloatEvaluator:用于计算Float类型属性值的计算器。</li>
    <li>ArgbEvaluator:用于计算以16进制形式表示的颜色值的计算器。</li>
    <li>TypeEvaluator:一个计算器接口，它允许你创建你自己的计算器。如果你正在计算一个对象属性并不是int,float或者颜色值类型的，那么你必须实现TypeEvaluator接口去指定如何去计算对象的属性值。</li>
  </ul>
</blockquote>

<h4 id="valueanimatoranimatorupdatelistener-">2. 新加了ValueAnimator.AnimatorUpdateListener 监听</h4>
<p>　　onAnimationUpdate() - 在动画的每一帧上调用. 在这个方法中，你可以使用ValueAnimator的getAnimatedValue()方法来获取(Evaluators)计算出来的值。
AnimationSet提供了一个把多个动画组合成一个组合的机制，并可设置组中动画的时序关系，如同时播放，顺序播放等。</p>

<h4 id="view">3. 新增属性动画的同时，也新增了View的属性的设置获取方法</h4>
<p>　Example：getLeft、getX、getTranslationX等等</p>

<h4 id="animationset">4. 通过AnimationSet应用多个动画</h4>
<p>　　以下例子同时应用5个动画：</p>

<div class="highlighter-rouge"><pre class="highlight"><code>播放anim1；
同时播放anim2,anim3,anim4；
播放anim5。 　　
</code></pre>
</div>

<figure class="highlight"><pre><code class="language-java" data-lang="java">    <span class="n">AnimatorSet</span> <span class="n">bouncer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnimatorSet</span><span class="o">();</span>
    <span class="n">bouncer</span><span class="o">.</span><span class="na">play</span><span class="o">(</span><span class="n">anim1</span><span class="o">).</span><span class="na">before</span><span class="o">(</span><span class="n">anim2</span><span class="o">);</span>
    <span class="n">bouncer</span><span class="o">.</span><span class="na">play</span><span class="o">(</span><span class="n">anim2</span><span class="o">).</span><span class="na">with</span><span class="o">(</span><span class="n">anim3</span><span class="o">);</span>
    <span class="n">bouncer</span><span class="o">.</span><span class="na">play</span><span class="o">(</span><span class="n">anim2</span><span class="o">).</span><span class="na">with</span><span class="o">(</span><span class="n">anim4</span><span class="o">)</span>
    <span class="n">bouncer</span><span class="o">.</span><span class="na">play</span><span class="o">(</span><span class="n">anim5</span><span class="o">).</span><span class="na">after</span><span class="o">(</span><span class="n">amin2</span><span class="o">);</span>
    <span class="n">animatorSet</span><span class="o">.</span><span class="na">start</span><span class="o">();</span></code></pre></figure>

<h4 id="objectanimatorvalueanimator">5. ObjectAnimator与ValueAnimator之间的关系：</h4>
<p>　　其实ObjectAnimator继承与ValueAnimator，ObjectAnimator是为了提供简便的方法，可以直接修改alpha、backgroundColor、translationX、x、y、width等，甚至是一个普通对象的属性，一言以蔽之如果直接通过属性名改属性就用ObjectAnimator</p>

<blockquote>
  <p>例子：<a href="http://www.jianshu.com/p/03fdcfd3ae9c">Periscope点赞效果实现</a>
<img src="http://img.blog.csdn.net/20160419161534918" alt="这里写图片描述" /></p>
</blockquote>

<p>　　我又换了种方式实现了下，运用我们的属性动画，直接在ViewGroup上画出来：
　　<img src="http://img.blog.csdn.net/20160420165151408" alt="这里写图片描述" /></p>

<p>　　<a href="http://download.csdn.net/detail/yuanyang5917/9497167">代码传送门</a></p>

<h4 id="section-1">6. 同一对象的多个属性同时变化可优化</h4>
<p>　　如果需要对一个View的多个属性进行动画可以用ViewPropertyAnimator类，该类对多属性动画进行了优化，会合并一些invalidate()来减少刷新视图，该类在3.1中引入。</p>

<p>　　以下两段代码实现同样的效果：　</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">PropertyValuesHolder</span> <span class="n">pvhX</span> <span class="o">=</span> <span class="n">PropertyValuesHolder</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="s">"x"</span><span class="o">,</span> <span class="mi">50</span><span class="n">f</span><span class="o">);</span>
<span class="n">PropertyValuesHolder</span> <span class="n">pvhY</span> <span class="o">=</span> <span class="n">PropertyValuesHolder</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="s">"y"</span><span class="o">,</span> <span class="mi">100</span><span class="n">f</span><span class="o">);</span>
<span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofPropertyValuesHolder</span><span class="o">(</span><span class="n">myView</span><span class="o">,</span> <span class="n">pvhX</span><span class="o">,</span> <span class="n">pvyY</span><span class="o">).</span><span class="na">start</span><span class="o">();</span></code></pre></figure>

<h4 id="evaluatorviewhandlerpostuiview">7. <strong>原理</strong>：异步根据插补器与Evaluator计算出当前View的属性，再通过handler.post到UI线程，通过反射给View设置当前属性。</h4>
<p><a href="http://zhouyunan2010.iteye.com/blog/1972789">老版本的Property Animation原理讲解</a></p>

<blockquote>
  <h3 id="tween-animation--property-animation-">Tween Animation 与 Property Animation 使用选择：</h3>
  <p>因为Property Animation最终跟新UI其实也需要重新绘图，所以，属性动画肯定比Tween Animation要更好性能得多，理论上流畅度也稍稍差点。
<strong>所以建议能用Tween Animation的地方，还是使用Tween 动画。</strong></p>
</blockquote>

<hr />

<h1 id="apidemo">根据ApiDemo罗列了以下几个实用场景（此处会有不少新的用法）：</h1>

<h2 id="section-2">1. 颜色渐变</h2>

<p><img src="http://img.blog.csdn.net/20160420095341051" alt="这里写图片描述" /></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">RED</span> <span class="o">=</span> <span class="mh">0xff</span><span class="n">FF8080</span><span class="o">;</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">BLUE</span> <span class="o">=</span> <span class="mh">0xff8080</span><span class="n">FF</span><span class="o">;</span>

<span class="n">ValueAnimator</span> <span class="n">colorAnim</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofInt</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">"backgroundColor"</span><span class="o">,</span> <span class="n">RED</span><span class="o">,</span> <span class="n">BLUE</span><span class="o">);</span>
    <span class="n">colorAnim</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>
    <span class="n">colorAnim</span><span class="o">.</span><span class="na">setEvaluator</span><span class="o">(</span><span class="k">new</span> <span class="n">ArgbEvaluator</span><span class="o">());</span>
    <span class="n">colorAnim</span><span class="o">.</span><span class="na">setRepeatCount</span><span class="o">(</span><span class="n">ValueAnimator</span><span class="o">.</span><span class="na">INFINITE</span><span class="o">);</span>
    <span class="n">colorAnim</span><span class="o">.</span><span class="na">setRepeatMode</span><span class="o">(</span><span class="n">ValueAnimator</span><span class="o">.</span><span class="na">REVERSE</span><span class="o">);</span>
    <span class="n">colorAnim</span><span class="o">.</span><span class="na">start</span><span class="o">();</span></code></pre></figure>

<h2 id="layouttransition">2. 布局显示、不显示、隐藏(LayoutTransition)</h2>

<p><img src="http://img.blog.csdn.net/20160420174213674" alt="这里写图片描述" />
ViewGroup中的子元素可以通过setVisibility使其Visible、Invisible或Gone，当有子元素可见性改变时，可以向其应用动画，通过LayoutTransition类应用此类动画：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">transition</span><span class="o">.</span><span class="na">setAnimator</span><span class="o">(</span><span class="n">LayoutTransition</span><span class="o">.</span><span class="na">DISAPPEARING</span><span class="o">,</span> <span class="n">customDisappearingAnim</span><span class="o">);</span></code></pre></figure>

<p>　　通过setAnimator应用动画，第一个参数表示应用的情境，可以以下4种类型：</p>

<ul>
  <li>APPEARING　　　　　　　　当一个元素变为Visible时对其应用的动画</li>
  <li>CHANGE_APPEARING　　　当一个元素变为Visible时，因系统要重新布局有一些元素需要移动，这些要移动的元素应用的动画</li>
  <li>DISAPPEARING　　　　　　当一个元素变为InVisible时对其应用的动画</li>
  <li>CHANGE_DISAPPEARING　当一个元素变为Gone时，因系统要重新布局有一些元素需要移动，这些要移动的元素应用的动画 disappearing from the 
container.</li>
</ul>

<blockquote>
  <p>步骤：
1. 给view设置LayoutTransition
　 LayoutTransition mTransitioner = new LayoutTransition();
　view.setLayoutTransition(mTransitioner);
2. 设置对应时间
　 Transitioner.setStagger(LayoutTransition.CHANGE_APPEARING, 500);
3. 设置动画
　ObjectAnimator changeIn = ObjectAnimator.ofPropertyValuesHolder(
                        this, pvhLeft, pvhRight, pvhScaleX, pvhScaleY).
                setDuration(mTransitioner.getDuration(LayoutTransition.CHANGE_APPEARING));
        mTransitioner.setAnimator(LayoutTransition.CHANGE_APPEARING, changeIn);
4.  搞定</p>
</blockquote>

<h2 id="keyframes">3. Keyframes</h2>
<p>　 keyFrame是一个 时间/值 对，通过它可以定义一个在特定时间的特定状态，而且在两个keyFrame之间可以定义不同的Interpolator，就相当多个动画的拼接，第一个动画的结束点是第二个动画的开始点。KeyFrame是抽象类，要通过ofInt(),ofFloat(),ofObject()获得适当的KeyFrame，然后通过PropertyValuesHolder.ofKeyframe获得PropertyValuesHolder对象</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">    <span class="n">Keyframe</span> <span class="n">kf0</span> <span class="o">=</span> <span class="n">Keyframe</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="mi">0</span><span class="n">f</span><span class="o">,</span> <span class="mi">0</span><span class="n">f</span><span class="o">);</span>
    <span class="n">Keyframe</span> <span class="n">kf1</span> <span class="o">=</span> <span class="n">Keyframe</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(.</span><span class="mi">9999</span><span class="n">f</span><span class="o">,</span> <span class="mi">360</span><span class="n">f</span><span class="o">);</span>
    <span class="n">Keyframe</span> <span class="n">kf2</span> <span class="o">=</span> <span class="n">Keyframe</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="mi">1</span><span class="n">f</span><span class="o">,</span> <span class="mi">0</span><span class="n">f</span><span class="o">);</span>
    <span class="n">PropertyValuesHolder</span> <span class="n">pvhRotation</span> <span class="o">=</span>
    <span class="n">PropertyValuesHolder</span><span class="o">.</span><span class="na">ofKeyframe</span><span class="o">(</span><span class="s">"rotation"</span><span class="o">,</span> <span class="n">kf0</span><span class="o">,</span> <span class="n">kf1</span><span class="o">,</span> <span class="n">kf2</span><span class="o">);</span>
    <span class="kd">final</span> <span class="n">ObjectAnimator</span> <span class="n">changeOut</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofPropertyValuesHolder</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">pvhLeft</span><span class="o">,</span> <span class="n">pvhRight</span><span class="o">,</span> <span class="n">pvhRotation</span><span class="o">).</span><span class="na">setDuration</span><span class="o">(</span><span class="n">mTransitioner</span><span class="o">.</span><span class="na">getDuration</span><span class="o">(</span><span class="n">LayoutTransition</span><span class="o">.</span><span class="na">CHANGE_DISAPPEARING</span><span class="o">));</span></code></pre></figure>

<h2 id="section-3">4. 弹跳</h2>

<p><img src="http://img.blog.csdn.net/20160420220757849" alt="这里写图片描述" />
弹跳插补器：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">bounceAnim</span><span class="o">.</span><span class="na">setInterpolator</span><span class="o">(</span><span class="k">new</span> <span class="n">BounceInterpolator</span><span class="o">());</span></code></pre></figure>

<p><img src="http://img.blog.csdn.net/20160420220818740" alt="这里写图片描述" />
设置特定一个时间点，显示在那帧位置上</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">bounceAnim</span><span class="o">.</span><span class="na">setCurrentPlayTime</span><span class="o">(</span><span class="n">seekTime</span><span class="o">);</span></code></pre></figure>

<h2 id="section-4">5. 反转切换布局</h2>
<p><img src="http://img.blog.csdn.net/20160420221214985" alt="这里写图片描述" /></p>

<p>其实就是一个旋转动画的拼接，一组对立的插补器(加速AccelerateInterpolator、减速DecelerateInterpolator)</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">ObjectAnimator</span> <span class="n">visToInvis</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">visibleList</span><span class="o">,</span> <span class="s">"rotationY"</span><span class="o">,</span> <span class="mi">0</span><span class="n">f</span><span class="o">,</span> <span class="mi">90</span><span class="n">f</span><span class="o">);</span>
        <span class="n">visToInvis</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
        <span class="n">visToInvis</span><span class="o">.</span><span class="na">setInterpolator</span><span class="o">(</span><span class="n">accelerator</span><span class="o">);</span>
        <span class="kd">final</span> <span class="n">ObjectAnimator</span> <span class="n">invisToVis</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">invisibleList</span><span class="o">,</span> <span class="s">"rotationY"</span><span class="o">,</span>
                <span class="o">-</span><span class="mi">90</span><span class="n">f</span><span class="o">,</span> <span class="mi">0</span><span class="n">f</span><span class="o">);</span>
        <span class="n">invisToVis</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
        <span class="n">invisToVis</span><span class="o">.</span><span class="na">setInterpolator</span><span class="o">(</span><span class="n">decelerator</span><span class="o">);</span>
        <span class="n">visToInvis</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="n">AnimatorListenerAdapter</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="n">onAnimationEnd</span><span class="o">(</span><span class="n">Animator</span> <span class="n">anim</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">visibleList</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">GONE</span><span class="o">);</span>
                <span class="n">invisToVis</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
                <span class="n">invisibleList</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="n">visToInvis</span><span class="o">.</span><span class="na">start</span><span class="o">();</span></code></pre></figure>

	  ]]></description>
	</item>

	<item>
	  <title>注解初始化控件(ButterKnife方式)<下></title>
	  <link>//butterknifedemo02</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-04-13T00:00:00+08:00</pubDate>
	  <guid>//butterknifedemo02</guid>
	  <description><![CDATA[
	     <p>一个星期没更新博客了，虽然目前博客很乱！最近比较忙，视力有些下降，不过ButterKnife的事件实现终算完成了！</p>

<blockquote>
  <h3 id="butterknifedemohttpdownloadcsdnnetdetailyuanyang59179489865"><a href="http://download.csdn.net/detail/yuanyang5917/9489865">ButterKnifeDemo实现(注解完善，方便阅读)</a></h3>
</blockquote>

<h2 id="section">目标</h2>
<p>之所以butterknife可以实现点击view的时候调用注解过的方法，其实是在点击的回调方法中调用目标类的相应注释过的方法：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">        <span class="n">view</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">DebouncingOnClickListener</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="n">doClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">target</span><span class="o">.</span><span class="na">click</span><span class="o">(</span><span class="n">v</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span></code></pre></figure>

<p>拿我的demo为例，我们最终是要生成一个如下的类：</p>

<p>这里写代码片</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">turbo</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">apt</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.turbo.apt.library.internal.DebouncingOnClickListener</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.turbo.apt.library.internal.Finder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.turbo.apt.library.internal.ViewBinder</span><span class="o">;</span>

<span class="cm">/**
 * Created by LuckyTurbo on 16/4/11.
 *
 * 待生成的类
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity_ViewBinder</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">MainActivity</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">ViewBinder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">bind</span><span class="o">(</span><span class="n">Finder</span> <span class="n">finder</span><span class="o">,</span> <span class="kd">final</span> <span class="n">T</span> <span class="n">target</span><span class="o">,</span> <span class="n">Object</span> <span class="n">source</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="n">view</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">,</span><span class="s">"textView 我 啊"</span><span class="o">);</span>
        <span class="n">target</span><span class="o">.</span><span class="na">textView</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">castView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">,</span><span class="s">"textView 我 啊"</span><span class="o">);</span>
        <span class="n">view</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">rightView</span><span class="o">,</span><span class="s">"rightView 我 啊"</span><span class="o">);</span>
        <span class="n">target</span><span class="o">.</span><span class="na">rightView</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">castView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">rightView</span><span class="o">,</span><span class="s">"rightView 我 啊"</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">DebouncingOnClickListener</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="n">doClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">target</span><span class="o">.</span><span class="na">click</span><span class="o">(</span><span class="n">v</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>

    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>那么下面要做的就是收集各种注解数据，然后再根据这些数据生成最终的类。</p>

<h2 id="section-1">收集数据</h2>
<p>绝大部分方法的数据都是从注解中获取的，那么我们如何设计注解呢？
### 注解设计分析
需求：
1.id
2.设置方法 (example:setOnLongClickListener)
3.接口类型 (android.view.View.OnLongClickListener)
4.接口中的方法：
1.方法名 (onLongClick)
2.参数类型 (android.view.View)
3.方法返回值 （boolean）</p>

<p>这么多东西如果在每个注解里面都加上，想想都恶心，但是注解并没有继承这一说，但是我们可以在注解的基础上再进行注解，上层注解里面可以设定默认值，每次给上层注解填值就可以了
——其实我们想要的就是规范，就是模版，其实就是针对规范编程</p>

<p>下面看下主要的几个注解：</p>

<ul>
  <li>@OnClick</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">CLASS</span><span class="o">)</span>
<span class="nd">@ListenerClass</span><span class="o">(</span>
        <span class="n">targetType</span> <span class="o">=</span> <span class="s">"android.view.View"</span><span class="o">,</span>
        <span class="n">setter</span> <span class="o">=</span> <span class="s">"setOnClickListener"</span><span class="o">,</span>
        <span class="n">type</span> <span class="o">=</span> <span class="s">"com.turbo.apt.library.internal.DebouncingOnClickListener"</span><span class="o">,</span><span class="c1">// 这个是butterKnife中的防卡点击</span>
        <span class="n">method</span> <span class="o">=</span> <span class="nd">@ListenerMethod</span><span class="o">(</span>
                <span class="n">name</span> <span class="o">=</span> <span class="s">"doClick"</span><span class="o">,</span>
                <span class="n">parameters</span> <span class="o">=</span> <span class="s">"android.view.View"</span><span class="o">,</span>
                <span class="n">returnType</span> <span class="o">=</span> <span class="s">"void"</span>
        <span class="o">)</span>
<span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">OnClick</span> <span class="o">{</span>
    <span class="c1">// ids annotation注解 奇怪没导入成功</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">value</span><span class="o">()</span> <span class="k">default</span> <span class="o">{</span><span class="n">View</span><span class="o">.</span><span class="na">NO_ID</span><span class="o">};</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>@ListenerClass</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">ANNOTATION_TYPE</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span><span class="c1">// 靠，获取注解的注解好像必需要使用runtime，不然取不到</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">ListenerClass</span> <span class="o">{</span>
    <span class="c1">//    @ListenerClass(</span>
    <span class="c1">//            targetType = "android.view.View",</span>
    <span class="c1">//            setter = "setOnClickListener",</span>
    <span class="c1">//            type = "butterknife.internal.DebouncingOnClickListener",</span>
    <span class="c1">//            method = @ListenerMethod(</span>
    <span class="c1">//                    name = "doClick",</span>
    <span class="c1">//                    parameters = "android.view.View"</span>
    <span class="c1">//            )</span>
    <span class="c1">//    )</span>

    <span class="c1">// 某view</span>
    <span class="n">String</span> <span class="n">targetType</span><span class="o">();</span>
    <span class="c1">// 设置方法的名称</span>
    <span class="n">String</span> <span class="n">setter</span><span class="o">();</span>
    <span class="c1">// 接口全称</span>
    <span class="n">String</span> <span class="n">type</span><span class="o">();</span>
    <span class="cm">/** Enum which declares the listener callback methods. Mutually exclusive to {@link #method()}. */</span>
    <span class="c1">// 跟method互斥</span>
    <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Enum</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">callbacks</span><span class="o">()</span> <span class="k">default</span> <span class="n">NONE</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
    <span class="cm">/**
     * Method data for single-method listener callbacks. Mutually exclusive with {@link #callbacks()}
     * and an error to specify more than one value.
     */</span>
    <span class="n">ListenerMethod</span> <span class="n">method</span><span class="o">();</span>

    <span class="c1">// callback的默认值</span>
    <span class="kd">enum</span> <span class="n">NONE</span> <span class="o">{}</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>@ListenerMethod</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">ListenerMethod</span> <span class="o">{</span>

    <span class="c1">// listener 方法 的 名字</span>
    <span class="n">String</span> <span class="n">name</span><span class="o">();</span>

    <span class="c1">// 方法参数</span>
    <span class="n">String</span><span class="o">[]</span> <span class="n">parameters</span><span class="o">()</span> <span class="k">default</span> <span class="o">{};</span>

    <span class="c1">// 方法返回类型</span>
    <span class="n">String</span> <span class="n">returnType</span><span class="o">()</span> <span class="k">default</span> <span class="s">"void"</span><span class="o">;</span>

    <span class="cm">/** If {@link #returnType()} is not {@code void} this value is returned when no binding exists. */</span>
    <span class="c1">// 如果returnType 不是void，就返回这个值</span>
    <span class="n">String</span> <span class="n">defaultReturn</span><span class="o">()</span> <span class="k">default</span> <span class="s">"null"</span><span class="o">;</span>
<span class="o">}</span></code></pre></figure>

<h3 id="section-2">注解收集数据结构</h3>
<p><img src="http://img.blog.csdn.net/20160413140458623" alt="这里写图片描述" /></p>

<h3 id="section-3">注解收集数据逻辑</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">TypeElement</span><span class="o">,</span> <span class="n">VBinderBuilder</span><span class="o">&gt;</span> <span class="n">findAndParseTargets</span><span class="o">(</span><span class="n">RoundEnvironment</span> <span class="n">roundEnv</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">NoSuchMethodException</span><span class="o">,</span> <span class="n">InvocationTargetException</span><span class="o">,</span> <span class="n">IllegalAccessException</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">TypeElement</span><span class="o">,</span> <span class="n">VBinderBuilder</span><span class="o">&gt;</span> <span class="n">vBinderBuilderMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashMap</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// 解析所有的@Bind 元素</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Element</span> <span class="n">element</span> <span class="o">:</span> <span class="n">roundEnv</span><span class="o">.</span><span class="na">getElementsAnnotatedWith</span><span class="o">(</span><span class="n">Bind</span><span class="o">.</span><span class="na">class</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">TypeElement</span> <span class="n">typeElement</span> <span class="o">=</span> <span class="o">(</span><span class="n">TypeElement</span><span class="o">)</span> <span class="n">element</span><span class="o">.</span><span class="na">getEnclosingElement</span><span class="o">();</span>
            <span class="n">VBinderBuilder</span> <span class="n">builderClass</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">vBinderBuilderMap</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">typeElement</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">builderClass</span> <span class="o">=</span> <span class="n">vBinderBuilderMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">typeElement</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">String</span> <span class="n">targetType</span> <span class="o">=</span> <span class="n">typeElement</span><span class="o">.</span><span class="na">getQualifiedName</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
                <span class="n">String</span> <span class="n">classPackage</span> <span class="o">=</span> <span class="n">getPackageName</span><span class="o">(</span><span class="n">typeElement</span><span class="o">);</span>
                <span class="c1">// packageName$className_ViewBinder</span>
                <span class="n">String</span> <span class="n">className</span> <span class="o">=</span> <span class="n">getClassName</span><span class="o">(</span><span class="n">typeElement</span><span class="o">,</span> <span class="n">classPackage</span><span class="o">)</span> <span class="o">+</span> <span class="n">APTConfig</span><span class="o">.</span><span class="na">SUFFIX</span><span class="o">;</span>

                <span class="n">builderClass</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VBinderBuilder</span><span class="o">(</span><span class="n">classPackage</span><span class="o">,</span> <span class="n">className</span><span class="o">,</span> <span class="n">targetType</span><span class="o">);</span>
                <span class="n">vBinderBuilderMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">typeElement</span><span class="o">,</span> <span class="n">builderClass</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">Bind</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">value</span><span class="o">();</span>
            <span class="n">String</span> <span class="n">elementName</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
            <span class="n">TypeName</span> <span class="n">typeName</span> <span class="o">=</span> <span class="n">TypeName</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">asType</span><span class="o">());</span>
            <span class="n">FieldViewBinding</span> <span class="n">fieldViewBinding</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FieldViewBinding</span><span class="o">(</span><span class="n">elementName</span><span class="o">,</span> <span class="n">typeName</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
            <span class="n">builderClass</span><span class="o">.</span><span class="na">addField</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">fieldViewBinding</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 解析所有LISTENERS：方法上的事件注解</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Annotation</span><span class="o">&gt;</span> <span class="n">annotationClass</span> <span class="o">:</span> <span class="n">LISTENERS</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">Element</span> <span class="n">element</span> <span class="o">:</span> <span class="n">roundEnv</span><span class="o">.</span><span class="na">getElementsAnnotatedWith</span><span class="o">(</span><span class="n">annotationClass</span><span class="o">))</span> <span class="o">{</span>
                <span class="c1">// 方法元素</span>
                <span class="n">ExecutableElement</span> <span class="n">executableElement</span> <span class="o">=</span> <span class="o">(</span><span class="n">ExecutableElement</span><span class="o">)</span> <span class="n">element</span><span class="o">;</span>
                <span class="c1">// 类元素(持有者元素)</span>
                <span class="n">TypeElement</span> <span class="n">enclosingElement</span> <span class="o">=</span> <span class="o">(</span><span class="n">TypeElement</span><span class="o">)</span> <span class="n">element</span><span class="o">.</span><span class="na">getEnclosingElement</span><span class="o">();</span>
                <span class="c1">// 方法的注解对象</span>
                <span class="n">Annotation</span> <span class="n">annotation</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">annotationClass</span><span class="o">);</span>
                <span class="c1">// 注解的value方法</span>
                <span class="n">Method</span> <span class="n">annotationValue</span> <span class="o">=</span> <span class="n">annotationClass</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">"value"</span><span class="o">);</span>
                <span class="c1">// 获取注解的ids</span>
                <span class="kt">int</span><span class="o">[]</span> <span class="n">ids</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">[])</span> <span class="n">annotationValue</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">annotation</span><span class="o">);</span>
                <span class="c1">// 方法名称</span>
                <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">executableElement</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
                <span class="c1">// 注解的注解</span>
                <span class="n">ListenerClass</span> <span class="n">listenerClass</span> <span class="o">=</span> <span class="n">annotationClass</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">ListenerClass</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                <span class="c1">// 注解注解的参数</span>
                <span class="n">ListenerMethod</span> <span class="n">listenerMethod</span> <span class="o">=</span> <span class="n">listenerClass</span><span class="o">.</span><span class="na">method</span><span class="o">();</span>
                <span class="c1">// 方法参数</span>
                <span class="n">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">VariableElement</span><span class="o">&gt;</span> <span class="n">methodParameters</span> <span class="o">=</span> <span class="n">executableElement</span><span class="o">.</span><span class="na">getParameters</span><span class="o">();</span>

                <span class="n">Parameter</span><span class="o">[]</span> <span class="n">parameters</span> <span class="o">=</span> <span class="n">Parameter</span><span class="o">.</span><span class="na">NONE</span><span class="o">;</span>
                <span class="c1">// 真实方法参数</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">methodParameters</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">parameters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Parameter</span><span class="o">[</span><span class="n">methodParameters</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
                    <span class="c1">// 注解的注解中的参数类型</span>
                    <span class="n">String</span><span class="o">[]</span> <span class="n">parameterTypes</span> <span class="o">=</span> <span class="n">listenerMethod</span><span class="o">.</span><span class="na">parameters</span><span class="o">();</span>

                    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">methodParameters</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                        <span class="n">VariableElement</span> <span class="n">methodParameter</span> <span class="o">=</span> <span class="n">methodParameters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                        <span class="c1">// 方法参数</span>
                        <span class="n">TypeMirror</span> <span class="n">methodParameterType</span> <span class="o">=</span> <span class="n">methodParameter</span><span class="o">.</span><span class="na">asType</span><span class="o">();</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">methodParameterType</span> <span class="k">instanceof</span> <span class="n">TypeVariable</span><span class="o">)</span> <span class="o">{</span>
                            <span class="n">TypeVariable</span> <span class="n">typeVariable</span> <span class="o">=</span> <span class="o">(</span><span class="n">TypeVariable</span><span class="o">)</span> <span class="n">methodParameterType</span><span class="o">;</span>
                            <span class="n">methodParameterType</span> <span class="o">=</span> <span class="n">typeVariable</span><span class="o">.</span><span class="na">getUpperBound</span><span class="o">();</span>
                            <span class="n">messager</span><span class="o">.</span><span class="na">printMessage</span><span class="o">(</span><span class="n">Diagnostic</span><span class="o">.</span><span class="na">Kind</span><span class="o">.</span><span class="na">ERROR</span><span class="o">,</span> <span class="o">((</span><span class="n">TypeVariable</span><span class="o">)</span> <span class="n">methodParameterType</span><span class="o">).</span><span class="na">asElement</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">());</span>
                        <span class="o">}</span>
                        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">parameterTypes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                            <span class="c1">// 封装了真实参数的位置，类型</span>
                            <span class="n">parameters</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Parameter</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">TypeName</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">methodParameterType</span><span class="o">));</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="c1">// name:方法名 parameters:方法参数parameter required:方法上是否有Optional注解（一般不会有，所以为true）</span>
                <span class="c1">// 一般都是true，我们这里没有给注解设置Optional注解</span>
                <span class="n">MethodViewBinding</span> <span class="n">methodViewBinding</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MethodViewBinding</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">parameters</span><span class="o">),</span> <span class="kc">true</span><span class="o">);</span>
                <span class="n">VBinderBuilder</span> <span class="n">builderClass</span> <span class="o">=</span> <span class="n">getOrCreateTargetClass</span><span class="o">(</span><span class="n">vBinderBuilderMap</span><span class="o">,</span> <span class="n">enclosingElement</span><span class="o">);</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">id</span> <span class="o">:</span> <span class="n">ids</span><span class="o">){</span>
                    <span class="n">builderClass</span><span class="o">.</span><span class="na">addMethod</span><span class="o">(</span><span class="n">id</span><span class="o">,</span><span class="n">listenerClass</span><span class="o">,</span><span class="n">listenerMethod</span><span class="o">,</span><span class="n">methodViewBinding</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">vBinderBuilderMap</span><span class="o">;</span>
    <span class="o">}</span></code></pre></figure>

<h2 id="viewbinder">ViewBinder绑定帮助类生成</h2>

<p>根据上一篇的实现步骤，我们生成一个实现ViewBinder接口，及其方法，实现控件初始化的类已经不是一件难事，现在最大的困难就是如何通过JavaPoet实现类似下面的代码：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">        <span class="n">view</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">DebouncingOnClickListener</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="n">doClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">target</span><span class="o">.</span><span class="na">click</span><span class="o">(</span><span class="n">v</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span></code></pre></figure>

<p>根据butterKnife代码我给出具体的解决步骤：
以@OnLongClick为例：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// new DebouncingOnClickListener()</span>
<span class="c1">// 这里就是一个空接口以及一个父类</span>
<span class="n">TypeSpec</span><span class="o">.</span><span class="na">Builder</span> <span class="n">interfaceEventBuilder</span> <span class="o">=</span> <span class="n">TypeSpec</span><span class="o">.</span><span class="na">anonymousClassBuilder</span><span class="o">(</span><span class="s">""</span><span class="o">)</span>
						<span class="o">.</span><span class="na">superclass</span><span class="o">(</span><span class="n">ClassName</span><span class="o">.</span><span class="na">bestGuess</span><span class="o">(</span><span class="n">keyListenerClass</span><span class="o">.</span><span class="na">type</span><span class="o">()));</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// 这里代表的是 方法：public void doClick</span>
<span class="n">MethodSpec</span><span class="o">.</span><span class="na">Builder</span> <span class="n">interfaceMethodBuilder</span> <span class="o">=</span> <span class="n">MethodSpec</span><span class="o">.</span><span class="na">methodBuilder</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">())</span>
								<span class="o">.</span><span class="na">addAnnotation</span><span class="o">(</span><span class="n">Override</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
								<span class="o">.</span><span class="na">addModifiers</span><span class="o">(</span><span class="n">Modifier</span><span class="o">.</span><span class="na">PUBLIC</span><span class="o">)</span>
								<span class="o">.</span><span class="na">returns</span><span class="o">(</span><span class="n">bestGuess</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">returnType</span><span class="o">()));</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// 第一个参数  是参数类型  第一个参数是参数名(p0 p1 p2 ...)</span>
<span class="c1">// 方法中的参数(View v)</span>
<span class="n">interfaceMethodBuilder</span><span class="o">.</span><span class="na">addParameter</span><span class="o">(</span><span class="n">bestGuess</span><span class="o">(</span><span class="n">parameterTypes</span><span class="o">[</span><span class="n">i</span><span class="o">]),</span> <span class="s">"p"</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// 调用target的对应方法：target.click(v);</span>
<span class="n">codeBuilder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"target.$L("</span><span class="o">,</span> <span class="n">methodViewBinding</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span></code></pre></figure>

<p>整个方法的生成代码如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">addMethodBindings</span><span class="p">(</span><span class="n">MethodSpec</span><span class="o">.</span><span class="na">Builder</span> <span class="n">resultBuilder</span><span class="o">,</span> <span class="n">VBinderData</span> <span class="n">vbinderData</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">ListenerClass</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">ListenerMethod</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">MethodViewBinding</span><span class="o">&gt;&gt;&gt;</span> <span class="n">listenerMethodBindings</span> <span class="o">=</span> <span class="n">vbinderData</span><span class="o">.</span><span class="na">getMethodBindings</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">listenerMethodBindings</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">ListenerClass</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">ListenerMethod</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">MethodViewBinding</span><span class="o">&gt;&gt;&gt;&gt;</span> <span class="n">entries</span> <span class="o">=</span> <span class="n">listenerMethodBindings</span><span class="o">.</span><span class="na">entrySet</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">ListenerClass</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">ListenerMethod</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">MethodViewBinding</span><span class="o">&gt;&gt;&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">entries</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">ListenerClass</span> <span class="n">keyListenerClass</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
            <span class="n">Map</span><span class="o">&lt;</span><span class="n">ListenerMethod</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">MethodViewBinding</span><span class="o">&gt;&gt;</span> <span class="n">methodValue</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
            <span class="c1">// 创建接口实体类(空匿名类的接口父类)</span>
            <span class="c1">// anonymous 匿名</span>
            <span class="n">TypeSpec</span><span class="o">.</span><span class="na">Builder</span> <span class="n">interfaceEventBuilder</span> <span class="o">=</span> <span class="n">TypeSpec</span><span class="o">.</span><span class="na">anonymousClassBuilder</span><span class="o">(</span><span class="s">""</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">superclass</span><span class="o">(</span><span class="n">ClassName</span><span class="o">.</span><span class="na">bestGuess</span><span class="o">(</span><span class="n">keyListenerClass</span><span class="o">.</span><span class="na">type</span><span class="o">()));</span>
            <span class="c1">// 根据ListenerClass 中的 参数 生成代码</span>
            <span class="n">ListenerMethod</span> <span class="n">method</span> <span class="o">=</span> <span class="n">keyListenerClass</span><span class="o">.</span><span class="na">method</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">method</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">MethodSpec</span><span class="o">.</span><span class="na">Builder</span> <span class="n">interfaceMethodBuilder</span> <span class="o">=</span> <span class="n">MethodSpec</span><span class="o">.</span><span class="na">methodBuilder</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">())</span>
                        <span class="o">.</span><span class="na">addAnnotation</span><span class="o">(</span><span class="n">Override</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">addModifiers</span><span class="o">(</span><span class="n">Modifier</span><span class="o">.</span><span class="na">PUBLIC</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">returns</span><span class="o">(</span><span class="n">bestGuess</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">returnType</span><span class="o">()));</span>
                <span class="n">String</span><span class="o">[]</span> <span class="n">parameterTypes</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">parameters</span><span class="o">();</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">parameterTypes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="c1">// 第一个参数  是参数类型  第一个参数是参数名(p0 p1 p2 ...)</span>
                    <span class="n">interfaceMethodBuilder</span><span class="o">.</span><span class="na">addParameter</span><span class="o">(</span><span class="n">bestGuess</span><span class="o">(</span><span class="n">parameterTypes</span><span class="o">[</span><span class="n">i</span><span class="o">]),</span> <span class="s">"p"</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
                <span class="o">}</span>

                <span class="kt">boolean</span> <span class="n">hasReturnType</span> <span class="o">=</span> <span class="o">!</span><span class="s">"void"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">returnType</span><span class="o">());</span>
                <span class="c1">// 代码块</span>
                <span class="n">CodeBlock</span><span class="o">.</span><span class="na">Builder</span> <span class="n">codeBuilder</span> <span class="o">=</span> <span class="n">CodeBlock</span><span class="o">.</span><span class="na">builder</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">hasReturnType</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">codeBuilder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"return "</span><span class="o">);</span>
                <span class="o">}</span>

                <span class="c1">// 一个id对应多个ListenerMethod</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">methodValue</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">method</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">for</span> <span class="o">(</span><span class="n">MethodViewBinding</span> <span class="n">methodViewBinding</span> <span class="o">:</span> <span class="n">methodValue</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">method</span><span class="o">))</span> <span class="o">{</span>
                        <span class="c1">// 调用target的对应方法</span>
                        <span class="n">codeBuilder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"target.$L("</span><span class="o">,</span> <span class="n">methodViewBinding</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
                        <span class="n">List</span><span class="o">&lt;</span><span class="n">Parameter</span><span class="o">&gt;</span> <span class="n">parameters</span> <span class="o">=</span> <span class="n">methodViewBinding</span><span class="o">.</span><span class="na">getParameters</span><span class="o">();</span>
                        <span class="c1">// MethodListener注解的参数</span>
                        <span class="n">String</span><span class="o">[]</span> <span class="n">methodParameters</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">parameters</span><span class="o">();</span>
                        <span class="c1">// 优化了每次parameters.size()</span>
                        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">count</span> <span class="o">=</span> <span class="n">parameters</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                                <span class="n">codeBuilder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">", "</span><span class="o">);</span>
                            <span class="o">}</span>
                            <span class="n">Parameter</span> <span class="n">parameter</span> <span class="o">=</span> <span class="n">parameters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                            <span class="kt">int</span> <span class="n">listenerPosition</span> <span class="o">=</span> <span class="n">parameter</span><span class="o">.</span><span class="na">getListenerPosition</span><span class="o">();</span>
                            <span class="c1">// 类型不一样，范型万能转换</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">parameter</span><span class="o">.</span><span class="na">requiresCast</span><span class="o">(</span><span class="n">methodParameters</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
                                <span class="n">codeBuilder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"finder.&lt;$T&gt;castParam(p$L, $S, $L, $S, $L)\n"</span><span class="o">,</span> <span class="n">parameter</span><span class="o">.</span><span class="na">getType</span><span class="o">(),</span>
                                        <span class="n">listenerPosition</span><span class="o">,</span> <span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">(),</span> <span class="n">listenerPosition</span><span class="o">,</span> <span class="n">methodViewBinding</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">i</span><span class="o">);</span>
                            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                                <span class="n">codeBuilder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"p$L"</span><span class="o">,</span> <span class="n">listenerPosition</span><span class="o">);</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                        <span class="n">codeBuilder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">");\n"</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">hasReturnType</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">codeBuilder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"$L;\n"</span><span class="o">,</span> <span class="n">method</span><span class="o">.</span><span class="na">defaultReturn</span><span class="o">());</span>
                <span class="o">}</span>
                <span class="n">interfaceMethodBuilder</span><span class="o">.</span><span class="na">addCode</span><span class="o">(</span><span class="n">codeBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
                <span class="n">interfaceEventBuilder</span><span class="o">.</span><span class="na">addMethod</span><span class="o">(</span><span class="n">interfaceMethodBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
            <span class="o">}</span>
            <span class="c1">// 如果不是view类型，需要强转</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">APTConfig</span><span class="o">.</span><span class="na">VIEW_TYPE</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">keyListenerClass</span><span class="o">.</span><span class="na">targetType</span><span class="o">()))</span> <span class="o">{</span>
                <span class="c1">// targetType不是view的时候需要强转</span>
                <span class="n">resultBuilder</span><span class="o">.</span><span class="na">addStatement</span><span class="o">(</span><span class="s">"(($T) view).$L($L)"</span><span class="o">,</span> <span class="n">bestGuess</span><span class="o">(</span><span class="n">keyListenerClass</span><span class="o">.</span><span class="na">targetType</span><span class="o">()),</span>
                        <span class="n">keyListenerClass</span><span class="o">.</span><span class="na">setter</span><span class="o">(),</span> <span class="n">interfaceEventBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// view.setOnClickListener(对象)</span>
                <span class="n">resultBuilder</span><span class="o">.</span><span class="na">addStatement</span><span class="o">(</span><span class="s">"view.$L($L)"</span><span class="o">,</span> <span class="n">keyListenerClass</span><span class="o">.</span><span class="na">setter</span><span class="o">(),</span> <span class="n">interfaceEventBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span></code></pre></figure>

<p>其他的具体步骤大家看下demo</p>

<h2 id="section-4">总结</h2>
<p>代码这个东西，看跟敲是两种体验，也是两种结果，以后会继续坚持，总结下从butterKnife框架细节中我学到的知识：</p>

<ul>
  <li>BitSet : java中提供的此神器用来记录我对一组数据的改动与否</li>
  <li>@Retention(RUNTIME) ：注解的注解是需要runtime的，即便仅在编译期读取，RetentionPolicy.CLASS也是不奏效的，必需是RetentionPolicy.RUNTIME</li>
  <li>for (int i = 0, count = parameters.size(); i &lt; count; i++) : 省去每次遍历调用parameters.size()的同时，又优雅的初始化了count并附上了想要的值(智慧而优雅)</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>注解初始化控件(ButterKnife方式)<上></title>
	  <link>//butterknifedemo01</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-04-05T00:00:00+08:00</pubDate>
	  <guid>//butterknifedemo01</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>在学习了XUtils的注入方式之后，看了下ButterKnife的实现方式，结果发现完全不一样，然后借鉴网上的博客，结果发现用的都是Eclipse以及旧版本的ButterKnife进行实现的。</p>

  <p>这里我用AndroidStudio根据ButterKnife的版本进行了实现。</p>
</blockquote>

<p>文字枯燥，还是先看下butterknife的module图：
<img src="http://img.blog.csdn.net/20160401092206024" alt="这里写图片描述" /></p>

<p>先看下ButterKnife中生成的java代码（看看骚包的注释 Do not modify!）</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// Generated code from Butter Knife. Do not modify!</span>
<span class="c1">// Generated code from Butter Knife. Do not modify!</span>
<span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">butterknife</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">android.widget.AdapterView</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">butterknife.ButterKnife</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">butterknife.internal.DebouncingOnClickListener</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">butterknife.internal.Finder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">butterknife.internal.Utils</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">butterknife.internal.ViewBinder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.IllegalStateException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.Object</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.Override</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.SuppressWarnings</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleActivity</span><span class="err">$</span><span class="n">$ViewBinder</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">SimpleActivity</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">ViewBinder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="n">bind</span><span class="o">(</span><span class="kd">final</span> <span class="n">Finder</span> <span class="n">finder</span><span class="o">,</span> <span class="kd">final</span> <span class="n">T</span> <span class="n">target</span><span class="o">,</span> <span class="n">Object</span> <span class="n">source</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Unbinder</span> <span class="n">unbinder</span> <span class="o">=</span> <span class="n">createUnbinder</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
    <span class="n">View</span> <span class="n">view</span><span class="o">;</span>
    <span class="n">view</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="mi">2130968576</span><span class="o">,</span> <span class="s">"field 'title'"</span><span class="o">);</span>
    <span class="n">target</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">castView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="mi">2130968576</span><span class="o">,</span> <span class="s">"field 'title'"</span><span class="o">);</span>
    <span class="n">view</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="mi">2130968577</span><span class="o">,</span> <span class="s">"field 'subtitle'"</span><span class="o">);</span>
    <span class="n">target</span><span class="o">.</span><span class="na">subtitle</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">castView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="mi">2130968577</span><span class="o">,</span> <span class="s">"field 'subtitle'"</span><span class="o">);</span>
    <span class="n">view</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="mi">2130968578</span><span class="o">,</span> <span class="s">"field 'hello', method 'sayHello', and method 'sayGetOffMe'"</span><span class="o">);</span>
    <span class="n">target</span><span class="o">.</span><span class="na">hello</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">castView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="mi">2130968578</span><span class="o">,</span> <span class="s">"field 'hello'"</span><span class="o">);</span>
    <span class="n">unbinder</span><span class="o">.</span><span class="na">view2130968578</span> <span class="o">=</span> <span class="n">view</span><span class="o">;</span>
    <span class="n">view</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">DebouncingOnClickListener</span><span class="o">()</span> <span class="o">{</span>
      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="n">doClick</span><span class="o">(</span><span class="n">View</span> <span class="n">p0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">target</span><span class="o">.</span><span class="na">sayHello</span><span class="o">();</span>
      <span class="o">}</span>
    <span class="o">});</span>
    <span class="n">view</span><span class="o">.</span><span class="na">setOnLongClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnLongClickListener</span><span class="o">()</span> <span class="o">{</span>
      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">onLongClick</span><span class="o">(</span><span class="n">View</span> <span class="n">p0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">target</span><span class="o">.</span><span class="na">sayGetOffMe</span><span class="o">();</span>
      <span class="o">}</span>
    <span class="o">});</span>
    <span class="n">view</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="mi">2130968579</span><span class="o">,</span> <span class="s">"field 'listOfThings' and method 'onItemClick'"</span><span class="o">);</span>
    <span class="n">target</span><span class="o">.</span><span class="na">listOfThings</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">castView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="mi">2130968579</span><span class="o">,</span> <span class="s">"field 'listOfThings'"</span><span class="o">);</span>
    <span class="n">unbinder</span><span class="o">.</span><span class="na">view2130968579</span> <span class="o">=</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">((</span><span class="n">AdapterView</span><span class="o">&lt;?&gt;)</span> <span class="n">view</span><span class="o">).</span><span class="na">setOnItemClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">AdapterView</span><span class="o">.</span><span class="na">OnItemClickListener</span><span class="o">()</span> <span class="o">{</span>
      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="n">onItemClick</span><span class="o">(</span><span class="n">AdapterView</span><span class="o">&lt;?&gt;</span> <span class="n">p0</span><span class="o">,</span> <span class="n">View</span> <span class="n">p1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">p2</span><span class="o">,</span> <span class="kt">long</span> <span class="n">p3</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">target</span><span class="o">.</span><span class="na">onItemClick</span><span class="o">(</span><span class="n">p2</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">});</span>
    <span class="n">view</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="mi">2130968580</span><span class="o">,</span> <span class="s">"field 'footer'"</span><span class="o">);</span>
    <span class="n">target</span><span class="o">.</span><span class="na">footer</span> <span class="o">=</span> <span class="n">finder</span><span class="o">.</span><span class="na">castView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="mi">2130968580</span><span class="o">,</span> <span class="s">"field 'footer'"</span><span class="o">);</span>
    <span class="n">target</span><span class="o">.</span><span class="na">headerViews</span> <span class="o">=</span> <span class="n">Utils</span><span class="o">.</span><span class="na">listOf</span><span class="o">(</span>
        <span class="n">finder</span><span class="o">.&lt;</span><span class="n">View</span><span class="o">&gt;</span><span class="n">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="mi">2130968576</span><span class="o">,</span> <span class="s">"field 'headerViews'"</span><span class="o">),</span> 
        <span class="n">finder</span><span class="o">.&lt;</span><span class="n">View</span><span class="o">&gt;</span><span class="n">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="mi">2130968577</span><span class="o">,</span> <span class="s">"field 'headerViews'"</span><span class="o">),</span> 
        <span class="n">finder</span><span class="o">.&lt;</span><span class="n">View</span><span class="o">&gt;</span><span class="n">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="mi">2130968578</span><span class="o">,</span> <span class="s">"field 'headerViews'"</span><span class="o">));</span>
    <span class="n">target</span><span class="o">.</span><span class="na">unbinder</span> <span class="o">=</span> <span class="n">unbinder</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
  <span class="kd">protected</span> <span class="o">&lt;</span><span class="n">U</span> <span class="kd">extends</span> <span class="n">Unbinder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">U</span> <span class="n">createUnbinder</span><span class="o">(</span><span class="n">T</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">U</span><span class="o">)</span> <span class="k">new</span> <span class="n">Unbinder</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
  <span class="kd">protected</span> <span class="o">&lt;</span><span class="n">U</span> <span class="kd">extends</span> <span class="n">Unbinder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">U</span> <span class="n">accessUnbinder</span><span class="o">(</span><span class="n">T</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">U</span><span class="o">)</span> <span class="n">target</span><span class="o">.</span><span class="na">unbinder</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Unbinder</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">SimpleActivity</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">ButterKnife</span><span class="o">.</span><span class="na">ViewUnbinder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">T</span> <span class="n">target</span><span class="o">;</span>

    <span class="n">View</span> <span class="n">view2130968578</span><span class="o">;</span>

    <span class="n">View</span> <span class="n">view2130968579</span><span class="o">;</span>

    <span class="kd">protected</span> <span class="n">Unbinder</span><span class="o">(</span><span class="n">T</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">target</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="n">unbind</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalStateException</span><span class="o">(</span><span class="s">"Bindings already cleared."</span><span class="o">);</span>
      <span class="n">unbind</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
      <span class="n">target</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kt">void</span> <span class="n">unbind</span><span class="o">(</span><span class="n">T</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">target</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="n">target</span><span class="o">.</span><span class="na">subtitle</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="n">view2130968578</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
      <span class="n">view2130968578</span><span class="o">.</span><span class="na">setOnLongClickListener</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
      <span class="n">target</span><span class="o">.</span><span class="na">hello</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="o">((</span><span class="n">AdapterView</span><span class="o">&lt;?&gt;)</span> <span class="n">view2130968579</span><span class="o">).</span><span class="na">setOnItemClickListener</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
      <span class="n">target</span><span class="o">.</span><span class="na">listOfThings</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="n">target</span><span class="o">.</span><span class="na">footer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="n">target</span><span class="o">.</span><span class="na">headerViews</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="n">target</span><span class="o">.</span><span class="na">unbinder</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<h2 id="butterknifeviewdemohttpdownloadcsdnnetdetailyuanyang59179478759"><a href="http://download.csdn.net/detail/yuanyang5917/9478759">ButterKnifeView注入demo(简单易学)</a></h2>

<blockquote>
  <p>这个demo的代码生成，以及接口思想，以及调用生成代码的思想，都是借鉴ButterKnife的</p>
</blockquote>

<blockquote>
  <p>我先简单实现了ButterKnife的View注入，去除了ButterKnife繁琐的编译校验，本篇也没有添加事件注入(下一篇会有)</p>
</blockquote>

<h3 id="xutils--butterknife">XUtils 与 ButterKnife实现方式的区别</h3>
<p>上篇XUtils实现注解初始化用的是反射 +  动态代理</p>

<blockquote>
  <p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p>
</blockquote>

<h2 id="apt">APT</h2>
<p>而ButterKnife使用的是APT (Annotation Processing Tool )
&gt;apt是一个命令行工具，与之配套的还有一套用来描述程序语义结构的Mirror API。Mirror API（com.sun.mirror.*）描述的是程序在编译时刻的静态结构。通过Mirror API可以获取到被注解的Java类型元素的信息，从而提供相应的处理逻辑。具体的处理工作交给apt工具来完成。编写注解处理器的核心是AnnotationProcessorFactory和AnnotationProcessor两个接口。后者表示的是注解处理器，而前者则是为某些注解类型创建注解处理器的工厂。</p>

<ol>
  <li>
    <p>APT配置
需要再compiler Module中的main.resources.META-INF.services下新建文本java.annotation.processing.Processor，在文本内添加Processor全名(我的Processor是com.example.MyProcessor)
或者直接在Processor实现类上@AutoService(Processor.class)(我还没实现成功)
需要在build.gradle里面配置APT插件(classpath ‘com.neenbedankt.gradle.plugins:android-apt:1.8’)</p>
  </li>
  <li>
    <p>Processor类
(1)JAVA1.6以后的Processor实现类都需要extends AbstractProcessor
(2)Processor类需要指定其处理的注解
方式一(类上注解)：@SupportedAnnotationTypes(“com.example.AptBetter”)
方式二(重写方法)：getSupportedAnnotationTypes
(4)process方法，编译时进入的主方法，用于分析注解信息，以及生成代码
(4)Processor都要指定版本
一般获取最新的版本：</p>
  </li>
</ol>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Override</span>
<span class="kd">public</span> <span class="n">SourceVersion</span> <span class="nf">getSupportedSourceVersion</span><span class="p">(</span><span class="o">)</span> <span class="o">{</span>
<span class="k">return</span> <span class="n">SourceVersion</span><span class="o">.</span><span class="na">latestSupported</span><span class="o">();</span>
<span class="o">}</span></code></pre></figure>

<ol>
  <li>Process内部元素
ProcessingEnvironment：编译环境</li>
</ol>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// 用于生成代码</span>
<span class="n">Filer</span> <span class="n">filer</span> <span class="o">=</span> <span class="n">processingEnv</span><span class="o">.</span><span class="na">getFiler</span><span class="o">();</span>
<span class="c1">// 用于编译时给图</span>
<span class="n">Messager</span> <span class="n">messager</span> <span class="o">=</span> <span class="n">processingEnv</span><span class="o">.</span><span class="na">getMessager</span><span class="o">();</span>
<span class="c1">// Element工具，可以获取包名</span>
<span class="n">Elements</span> <span class="n">elementUtils</span> <span class="o">=</span> <span class="n">processingEnv</span><span class="o">.</span><span class="na">getElementUtils</span><span class="o">();</span></code></pre></figure>

<p>RoundEnvironment：回合环境(国内暂时没有固定的说法，暂且定义为元素环境)
因为可以从中获取到5大Element</p>

<figure class="highlight"><pre><code class="language-ios" data-lang="ios">Mirror的五大Element
PackageElement 包元素
TypeElement     类元素
VariableElement  变量元素
ExecutableElement  方法元素
TypeParameterElement  参数元素
通过这些元素，可以获取到元素的各种信息：注解、类型、名称等等</code></pre></figure>

<p>其中TypeMirror.accept这个我还很模糊，有明白的请赐教</p>

<ol>
  <li>代码生成器
这里有一个大杀器：JavaPoet (Java诗人) 也是Jake Wharton所参与的著作之一，膜拜Jake Wharthon，膜拜Square。大家可以直接到Github上搜索JavaPoet。</li>
</ol>

<h2 id="section">运行期流程</h2>

<p><img src="http://img.blog.csdn.net/20160401155957286" alt="这里写图片描述" /></p>

<p>主要是通过Butterknife调用生成的Activity$$ViewBinder类中的bind方法，实现了控件初始化、时间注入</p>

<h3 id="question-">Question :</h3>
<p>(1)在代码编写的时候类都还没有生成，那么如何获取其对象
answer:通过反，Activity也是通过这种方式生成的</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">viewBindingClass</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">clsName</span> <span class="o">+</span> <span class="s">"$$ViewBinder"</span><span class="o">);</span>
<span class="n">ViewBinder</span> <span class="n">viewBinder</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewBinder</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;)</span> <span class="n">viewBindingClass</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span></code></pre></figure>

<p>(2)如何能调用bind方法，如何能强转，因为生成的代码实现了ViewBinder接口，接口的力量啊！针对接口编程！</p>

<h2 id="compiler">分析compiler</h2>

<p>思路分析：
（1）一个类、一个内部类生成一个同包下的名称相似的IOC容器类
（2）一类中会有很多控件需要初始化，那么我们把一个类、一个内部类所提供的多个控件信息、类名、包名、id封装成一个Bean：BindingClass(ButterKnife除了可以给控件初始化之外，还可以给各种资源初始化，甚至可以解绑UnBinding，ButterKnife中把每种类型都封装成一种Bean，这里我们紧紧做了View的初始化),我们这里BindingClass里面仅仅放的是FieldViewBinding
（3）一个需要初始化的类对应一个BindingClass(含有很多FieldViewBinding)，对应生成一个ViewBinder，那么生成代码的逻辑我们可以放在Compiler中的BindingClass，作为其内部类(可以直接获取BindingClass中的类名、包名、控件集合)</p>

<p><img src="http://img.blog.csdn.net/20160404004902680" alt="这里写图片描述" /></p>

<h2 id="section-1">编译器读信息</h2>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// 所有AptBetter的成员变量</span>
        <span class="n">Set</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Element</span><span class="o">&gt;</span> <span class="n">elementsAnnotatedWith</span> <span class="o">=</span> <span class="n">roundEnv</span><span class="o">.</span><span class="na">getElementsAnnotatedWith</span><span class="o">(</span><span class="n">AptBetter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="c1">// 元素归类</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Element</span> <span class="n">element</span> <span class="o">:</span> <span class="n">elementsAnnotatedWith</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">TypeElement</span> <span class="n">typeElement</span> <span class="o">=</span> <span class="o">(</span><span class="n">TypeElement</span><span class="o">)</span> <span class="n">element</span><span class="o">.</span><span class="na">getEnclosingElement</span><span class="o">();</span>
            <span class="n">BindingClass</span> <span class="n">bindingClass</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">allBindEvent</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">typeElement</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">bindingClass</span> <span class="o">=</span> <span class="n">allBindEvent</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">typeElement</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">String</span> <span class="n">targetType</span> <span class="o">=</span> <span class="n">typeElement</span><span class="o">.</span><span class="na">getQualifiedName</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
                <span class="n">String</span> <span class="n">classPackage</span> <span class="o">=</span> <span class="n">getPackageName</span><span class="o">(</span><span class="n">typeElement</span><span class="o">);</span>
                <span class="c1">// packageName$className$$ViewBinder</span>
                <span class="n">String</span> <span class="n">className</span> <span class="o">=</span> <span class="n">getClassName</span><span class="o">(</span><span class="n">typeElement</span><span class="o">,</span> <span class="n">classPackage</span><span class="o">)</span> <span class="o">+</span> <span class="n">SUFFIX</span><span class="o">;</span>

                <span class="n">bindingClass</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BindingClass</span><span class="o">(</span><span class="n">classPackage</span><span class="o">,</span> <span class="n">className</span><span class="o">,</span> <span class="n">targetType</span><span class="o">);</span>
                <span class="n">allBindEvent</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">typeElement</span><span class="o">,</span> <span class="n">bindingClass</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">AptBetter</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">value</span><span class="o">();</span>
            <span class="n">String</span> <span class="n">elementName</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
            <span class="n">TypeName</span> <span class="n">typeName</span> <span class="o">=</span> <span class="n">TypeName</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">asType</span><span class="o">());</span>
            <span class="n">bindingClass</span><span class="o">.</span><span class="na">addField</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="k">new</span> <span class="n">FieldViewBinding</span><span class="o">(</span><span class="n">elementName</span><span class="o">,</span> <span class="n">typeName</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
        <span class="o">}</span></code></pre></figure>

<h2 id="javapoet">代码生成(JavaPoet)</h2>
<p>这里是用的是JavaPoet，下面是教程地址：</p>

<ul>
  <li><a href="https://github.com/square/javapoet">JavaPoet In Github</a></li>
  <li><a href="http://p.codekk.com/detail/Android/square/javapoet">JavaPoet博客教程</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Technology Of Studying</title>
	  <link>//technologyof-studying</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-03-31T00:00:00+08:00</pubDate>
	  <guid>//technologyof-studying</guid>
	  <description><![CDATA[
	     <h2 id="studying">Studying</h2>
<ul>
  <li>ButterKnife通过APT实现IOC的</li>
  <li>潭州教育视频学习
 [(1)ImageLoader架构解析
 (2)插件式开发
 (3)视察动画]</li>
  <li>高焕堂网易云公开课
 ——Android中运用到的设计模式
 [13 Kinds of Design Pattern in Android Framwork]</li>
</ul>

<h2 id="section">已学完</h2>
<ul>
  <li>XUtils控件注入实现[注解＋反射＋动态代理]</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>UML类图关系</title>
	  <link>//uml</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-03-31T00:00:00+08:00</pubDate>
	  <guid>//uml</guid>
	  <description><![CDATA[
	     <p>准备写技术博客，发现UML画不出来，在这里捋一下UML各种类图关系，基于<a href="http://demo.netfoucs.com/feeltouch/article/details/46418045">UML类图几种关系的总结</a>，在此基础上做了归纳总结！</p>

<blockquote>
  <p><a href="https://www.processon.com/i/56fcb9fee4b04878f8245f1c">Process On一款非常好的UML在线编辑工具，made in China</a></p>
</blockquote>

<figure class="highlight"><pre><code class="language-default" data-lang="default">在UML类图中，常见几种关系：
1.泛化(Generalization_FY:概括)(继承 : 空三角 ＋ 直线)
2.实现(Realization_FY实现)(接口实现 : 空三角 ＋ 虚线)
3.关联(Association_FY协会)（直线 ＋ 箭头（箭头可无））
4.聚合(Aggregation_FY聚合)(整体与部分的关系，且部分可以离开整体而单独存在)（空菱形 ＋ 直线 ＋ 方向）
5.组合(Composition_FY组合)(整体与部分的关系，但部分不能离开整体而单独存在)（实菱形 ＋ 直线 ＋ 方向）
6.依赖(Dependency_FY依赖)（虚线 ＋ 箭头）

类与类之间由弱到强关系是: 没关系 &gt; 依赖 &gt; 关联 &gt; 聚合 &gt; 组合。</code></pre></figure>

<p>1.泛化（Generalization）</p>

<p>【泛化关系】：是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。</p>

<p>【箭头指向】：带三角箭头的实线，箭头指向父类</p>

<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092740_578.gif" alt="UML类图几种关系的总结" /></p>

<p>2.实现（Realization）</p>

<p>【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现.</p>

<p>【箭头指向】：带三角箭头的虚线，箭头指向接口</p>

<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_47.gif" alt="UML类图几种关系的总结" /></p>

<p>3.关联（Association)</p>

<p>【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。</p>

<p>【代码体现】：成员变量</p>

<p>【箭头及指向】：带普通箭头的实心线，指向被拥有者</p>

<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_41.gif" alt="这里写图片描述" /></p>

<p>上图中，老师与学生是双向关联，老师有多名学生，学生也可能有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。</p>

<p>下图为自身关联：</p>

<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_335.gif" alt="这里写图片描述" /></p>

<p>4.聚合（Aggregation）</p>

<p>【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。</p>

<p>聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。</p>

<p>【代码体现】：成员变量</p>

<p>【箭头及指向】：带空心菱形的实心线，菱形指向整体</p>

<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_681.gif" alt="这里写图片描述" /></p>

<p>5.组合(Composition)</p>

<p>【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。</p>

<p>组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。</p>

<p>【代码体现】：成员变量</p>

<p>【箭头及指向】：带实心菱形的实线，菱形指向整体</p>

<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_278.gif" alt="这里写图片描述" /></p>

<p>6.依赖(Dependency)</p>

<p>【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.</p>

<p>【代码表现】：局部变量、方法的参数或者对静态方法的调用</p>

<p>【箭头及指向】：带箭头的虚线，指向被使用者</p>

<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_129.gif" alt="这里写图片描述" /></p>

<blockquote>
  <p>各种关系的强弱顺序：
泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</p>
</blockquote>

<p>下面这张UML图，比较形象地展示了各种类图关系：</p>

<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092742_482.png" alt="这里写图片描述" /></p>

<blockquote>
  <p><a href="http://www.cnblogs.com/liuzhang/archive/2013/03/17/2964095.html">这里重点说下依赖与关联的区别</a></p>
</blockquote>

<figure class="highlight"><pre><code class="language-default" data-lang="default">依赖(dependency)
可以简单的理解，就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、、临时性的、非常弱的，但是B类的变化会影响到A；比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖；表现在代码层面，为类B作为参数被类A在某个method方法中使用。用带虚线的箭头。


关联(association)
他体现的是两个类、或者类与接口之间语义级别的一种强依赖关系，比如我和我的朋友；这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的、关联可以是单向、双向的；表现在代码层面，为被关联类B以类属性的形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量；</code></pre></figure>

<blockquote>
  <p>依赖就像一夜情，依赖就是使用XX干了YY(仅仅是用了Ta的一个方法)，关联是夫妻，你所有的都是你老婆的(你是你老婆的成员变量)
依赖就是对象偶然需要其它对象的某个方法或者某个属性，而关联是方向性的拥有关系，拥有那个对象，拥有那个对象的所有对外属性以及对外方法，完全深度拥有。</p>
</blockquote>


	  ]]></description>
	</item>

	<item>
	  <title>Android控件注解IOC注入(XUtils实现方式)</title>
	  <link>//iocxutils</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-03-29T00:00:00+08:00</pubDate>
	  <guid>//iocxutils</guid>
	  <description><![CDATA[
	     <h2 id="xutils">注解初始化控件(XUtils方式)</h2>

<blockquote>
  <p><a href="http://download.csdn.net/detail/yuanyang5917/9477513">DEMO链接地址</a></p>
</blockquote>

<blockquote>
  <p>在第一次潭州教育的公开课上接触了这个框架的讲解，我动手研究了一下，结果一出手就停不下来，先后被我碰上了（<a href="http://tech.glowing.com/cn/dynamic-android-programming/">Glow公司的技术博客——动态Android编程</a> ）、从几个大牛的博客（学到了github pages + Jekyll 免费制作博客网站）<br />
我发现不写博客，很多东西就会忘记(代码如何上传到jcenter我已经忘记了)<br />
Just Do it!真的会有意想不到的收获！</p>
</blockquote>

<p><img src="http://img.blog.csdn.net/20160329132113633" alt="实现效果" />
 1. IOC概念介绍
http://www.cnblogs.com/qqlin/archive/2012/10/09/2707075.html我是从这边文章学习的IOC概念的，写的浅显易懂</p>

<ul>
  <li>控件反转(IOC)：创建何种对象的控制权，转移到第三方</li>
  <li>依赖注入(DI)：是由IOC容器在运行期间，动态地将某种依赖关系注入到对象之中。</li>
  <li>IOC与DI之间的关系：DI是一种IOC的具体思想，(编译运行期，动态注入依赖关系)；使用配置文件实现依赖关系的配置也是一种IOC思想（依赖拖拽）。</li>
  <li>约定优于配置 这个是什么鬼？？</li>
  <li>依赖注入／依赖查找／依赖拖拽
    <ul>
      <li>依赖拖拽是通过对注入对象的集中配置实现的</li>
      <li>依赖查找是在业务组件代码中进行的（EJB和Apache Avalon ）
        <ol>
          <li>XUtils的实现方式XUtils实际上是通过 注解 ＋ 反射 ＋ 动态代理实现的。</li>
        </ol>
      </li>
    </ul>
  </li>
</ul>

<h2 id="layout">layout文件注入：</h2>
<ul>
  <li>使用：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@ContentViewInject</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span></code></pre></figure>

<ul>
  <li>注解：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span><span class="c1">// 使用对象：类</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span><span class="c1">// 生命范围：运行期</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">ContentViewInject</span> <span class="o">{</span>    
	<span class="kt">int</span> <span class="n">value</span><span class="o">();</span><span class="c1">// 存放布局id</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>注入代码：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java">	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">injectLayout</span><span class="p">(</span><span class="n">Activity</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// UIClz</span>
            <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Context</span><span class="o">&gt;</span> <span class="n">uiClass</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
            <span class="c1">// 类上的注解</span>
            <span class="n">ContentViewInject</span> <span class="n">annotation</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">ContentViewInject</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">annotation</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 注解中的layout id值</span>
                <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">annotation</span><span class="o">.</span><span class="na">value</span><span class="o">();</span>
                <span class="c1">// 通过反射使用activity中的setContentView方法进行 布局设置</span>
                <span class="c1">// 局限性：这个方法仅仅适用于activity</span>
                <span class="n">Method</span> <span class="n">setContentView</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">"setContentView"</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                <span class="n">setContentView</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span></code></pre></figure>

<h2 id="section">控件注入：</h2>

<ul>
  <li>使用：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@ViewInject</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">)</span>
<span class="n">TextView</span> <span class="n">textView</span><span class="o">;</span>
<span class="o">......</span>
  <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="n">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
        <span class="n">TurInject</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"徕帝嘎嘎"</span><span class="o">);</span>
    <span class="o">}</span></code></pre></figure>

<ul>
  <li>注解：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">ViewInject</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">value</span><span class="o">();</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>注入：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java">	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">injectViews</span><span class="p">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Context</span><span class="o">&gt;</span> <span class="n">uiClass</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
            <span class="c1">// 获取成员变量</span>
            <span class="n">Field</span><span class="o">[]</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getDeclaredFields</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">Field</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">ViewInject</span> <span class="n">annotation</span> <span class="o">=</span> <span class="n">field</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">ViewInject</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">annotation</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">annotation</span><span class="o">.</span><span class="na">value</span><span class="o">();</span>
                    <span class="n">Method</span> <span class="n">findViewById</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">"findViewById"</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                    <span class="n">Object</span> <span class="n">invoke</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
                    <span class="c1">// 设置允许访问</span>
                    <span class="n">field</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
                    <span class="n">field</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">invoke</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span></code></pre></figure>

<h2 id="section-1">事件注入</h2>

<ul>
  <li>使用代码：</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java">	<span class="nd">@ClickEvent</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">},</span> <span class="n">type</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">ccClick</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getBaseContext</span><span class="o">(),</span> <span class="s">"ccClick"</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@ClickEvent</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">},</span> <span class="n">type</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">OnLongClickListener</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">longClick</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getBaseContext</span><span class="o">(),</span> <span class="s">"longClick"</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
    <span class="o">}</span></code></pre></figure>

<ul>
  <li>注解</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">injectMethod</span><span class="p">(</span><span class="kd">final</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Context</span><span class="o">&gt;</span> <span class="n">uiClass</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
            <span class="c1">// 获取所有的方法</span>
            <span class="n">Method</span><span class="o">[]</span> <span class="n">methods</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getMethods</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="kd">final</span> <span class="n">Method</span> <span class="n">method</span> <span class="o">:</span> <span class="n">methods</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">ClickEvent</span> <span class="n">annotation</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">ClickEvent</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                <span class="c1">// 塞选含有ClickEvent注解的方法</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">annotation</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="kt">int</span><span class="o">[]</span> <span class="n">values</span> <span class="o">=</span> <span class="n">annotation</span><span class="o">.</span><span class="na">value</span><span class="o">();</span>
                    <span class="n">Class</span> <span class="n">type</span> <span class="o">=</span> <span class="n">annotation</span><span class="o">.</span><span class="na">type</span><span class="o">();</span>
                    <span class="c1">// 拿到控件</span>
                    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">viewId</span> <span class="o">:</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
                        <span class="c1">// 初始化控件</span>
                        <span class="n">Method</span> <span class="n">findViewById</span> <span class="o">=</span> <span class="n">uiClass</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">"findViewById"</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
                        <span class="c1">// view</span>
                        <span class="kd">final</span> <span class="n">Object</span> <span class="n">viewObj</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">viewId</span><span class="o">);</span>

                        <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">viewClass</span> <span class="o">=</span> <span class="n">viewObj</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
                        <span class="c1">// setOnClickListener／setOnLongClickListener等等</span>
                        <span class="n">String</span> <span class="n">viewSetMethodName</span> <span class="o">=</span> <span class="s">"set"</span> <span class="o">+</span> <span class="n">type</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>
                        <span class="n">Method</span> <span class="n">viewMethod</span> <span class="o">=</span> <span class="n">viewClass</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="n">viewSetMethodName</span><span class="o">,</span> <span class="n">type</span><span class="o">);</span>

                        <span class="c1">// 动态代理就是针对 任意 一个对象的接口方法的  管理／拦截／AOP</span>
                        <span class="n">ViewEventInvocationHandler</span> <span class="n">viewEventInvocationHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ViewEventInvocationHandler</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">method</span><span class="o">);</span>
                        <span class="c1">//  type.getClassLoader ： 类加载器   new Class[]{type} ： type为接口类</span>
                        <span class="n">Object</span> <span class="n">eventInterfaceInstance</span> <span class="o">=</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">type</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">type</span><span class="o">},</span> <span class="n">viewEventInvocationHandler</span><span class="o">);</span>
                        <span class="c1">// 动态代理  OnClickListener 中的</span>
                        <span class="c1">// 执行了setOnClickListener这个方法，那么在响应这个参数OnClickListener接口中的，onclick方法的时候会响应InvocationHandler中的invoke方法</span>
                        <span class="n">viewMethod</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">viewObj</span><span class="o">,</span> <span class="n">eventInterfaceInstance</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>

    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ViewEventInvocationHandler</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="n">Context</span> <span class="n">context</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">Method</span> <span class="n">contentMethod</span><span class="o">;</span>

        <span class="kd">public</span> <span class="n">ViewEventInvocationHandler</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Method</span> <span class="n">contentMethod</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">context</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">contentMethod</span> <span class="o">=</span> <span class="n">contentMethod</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="n">Object</span> <span class="n">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
            <span class="c1">// method 为OnClickListener 中的 onClick</span>
            <span class="c1">// 系统调用参数接口中的 onClick方法的时候，会响应这个方法</span>
            <span class="c1">// 响应这个方法的时候我们需要响应(activity中被ClickEvent标记过的方法)</span>
            <span class="c1">// contentMethod 为activity中被 ClickEvent标记过的方法</span>
            <span class="n">contentMethod</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span></code></pre></figure>

<p><a href="https://www.zhihu.com/question/20794107">知乎——代理、动态代理</a></p>

<ul>
  <li>主要用来做方法的增强，让你可以在不修改源码的情况下，增强一些方法，在方法执行前后做任何你想做的事情（甚至根本不去执行这个方法），因为在InvocationHandler的invoke方法中，你可以直接获取正在调用方法对应的Method对象，具体应用的话，比如可以添加调用日志，做事务控制等。</li>
  <li>还有一个有趣的作用是可以用作远程调用</li>
  <li>在某些情况下，一个客户不想或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</li>
  <li>为其他对象提供一种代理以控制对这个对象的访问</li>
  <li>
    <p>动态代理的缺憾：Proxy已经设计得非常优美，但是还是有一点点小小的遗憾之处，那就是它始终无法摆脱仅支持interface代理的桎梏</p>

    <p>到这里呢，XUtils的布局注入、控件注入、事件注入就全部介绍完了！</p>
  </li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>安卓开发清单</title>
	  <link>//android-inventory</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-03-21T00:00:00+08:00</pubDate>
	  <guid>//android-inventory</guid>
	  <description><![CDATA[
	     <div class="highlighter-rouge"><pre class="highlight"><code>编程素养：
        ——数据结构与算法
        ——设计模式

java基础：
        ——多线程
        ——反射
        ——注解
            ——APT
        ——自定义类加载器


android基础：
        ——自定义view完全解析
        ——动画种类跟原理
        ——5.0材质设计
        ——6.0权限管理
        ——源码解读
    

构架能力：
        ——xutils／butterknife 两种初始化控件方式
        ——Android单元测试
        ——Android测试工具
        ——图片OOM，Volley源码解读，demo功能实现
        ——MVP nucleus简化mvp
        ——REST接口
        ——Gradle插件
        ——大文件断点上传／下载（上传下载队列）
        ——RxJava
        ——React开发
        ——Android插件话开发
        ——Android混淆／加壳儿
        ——dragger
        ——增量升级
        ——ViewBinding
</code></pre>
</div>


	  ]]></description>
	</item>

	<item>
	  <title>开篇碎语!</title>
	  <link>//welcome-to-jekyll</link>
	  <author>LuckyTurbo</author>
	  <pubDate>2016-03-17T22:53:35+08:00</pubDate>
	  <guid>//welcome-to-jekyll</guid>
	  <description><![CDATA[
	     <div class="highlighter-rouge"><pre class="highlight"><code>做这个博客的冲动，来自于一个大三学学生的博客 ———— 此博客是用github pages ＋ jekyll 制作的。

评论、分页、站内搜索、标签、分类、七牛图片优化、站点统计、网站模版话、SEO优化  －－ 有空相继完善

标准化 －－ 流程化 －－ 自动化 （最终境界乃终极懒货）

Fighting！！！！！！！
</code></pre>
</div>


	  ]]></description>
	</item>


</channel>
</rss>
